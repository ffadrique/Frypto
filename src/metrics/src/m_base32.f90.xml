<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../fmx.xsl"?>
<fmx xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="m_base32.f90">
    <context>
        <time>2025-03-09T18:24:38</time>
        <version>1.0.0.1</version>
        <path>src</path>
        <path_to_root>../</path_to_root>
        <project>Frypto</project>
        <name>m_base32.f90</name>
        <copyright>Copyright © 2020, Fran Martinez Fadrique &lt;Fran.Martinez.Fadrique@gmail.com&gt;</copyright>
    </context>
    <units>
        <unit name="m_base32" type="module">
            <main>
                <lines>
                    <source percent="25.36">35</source>
                    <comments percent="55.07">76</comments>
                    <empty percent="19.57">27</empty>
                    <total>138</total>
                </lines>
                <complexity>
                    <minimum>0</minimum>
                    <maximum>0</maximum>
                    <average>0.00</average>
                </complexity>
                <nesting>
                    <minimum>0</minimum>
                    <maximum>0</maximum>
                    <average>0.00</average>
                </nesting>
                <methods>0</methods>
            </main>
            <methods>
                <method name="base32_decode_block" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="51.28">20</source>
                            <comments percent="28.21">11</comments>
                            <empty percent="20.51">8</empty>
                            <total>39</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="base32_default" type="function">
                    <statistics>
                        <lines>
                            <source percent="36.36">4</source>
                            <comments percent="27.27">3</comments>
                            <empty percent="36.36">4</empty>
                            <total>11</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="base32_encode_block" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="56.86">29</source>
                            <comments percent="25.49">13</comments>
                            <empty percent="17.65">9</empty>
                            <total>51</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="base32_main" type="function">
                    <statistics>
                        <lines>
                            <source percent="44.44">8</source>
                            <comments percent="22.22">4</comments>
                            <empty percent="33.33">6</empty>
                            <total>18</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="base32_trail_len" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">7</source>
                            <comments percent="28.57">6</comments>
                            <empty percent="38.10">8</empty>
                            <total>21</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
            </methods>
            <statistics>
                <lines>
                    <source percent="37.05">103</source>
                    <comments percent="40.65">113</comments>
                    <empty percent="22.30">62</empty>
                    <total>278</total>
                </lines>
                <complexity>
                    <minimum>1</minimum>
                    <maximum>1</maximum>
                    <average>1.00</average>
                </complexity>
                <nesting>
                    <minimum>1</minimum>
                    <maximum>1</maximum>
                    <average>1.00</average>
                </nesting>
                <methods>5</methods>
            </statistics>
        </unit>
    </units>
    <statistics>
        <lines>
            <source percent="37.05">103</source>
            <comments percent="40.65">113</comments>
            <empty percent="22.30">62</empty>
            <total>278</total>
        </lines>
        <complexity>
            <minimum>1</minimum>
            <maximum>1</maximum>
            <average>1.00</average>
        </complexity>
        <nesting>
            <minimum>1</minimum>
            <maximum>1</maximum>
            <average>1.00</average>
        </nesting>
        <methods>5</methods>
    </statistics>
    <code>
        <line t="M" i="1" b="0" n="0">module m_base32</line>
        <line t="M" i="2" b="0" n="0"></line>
        <line t="C" i="3" b="0" n="0">!------------------------------------------------------------------------------</line>
        <line t="C" i="4" b="0" n="0">! Copyright : 2022, Fran Martinez Fadrique &lt;Fran.Martinez.Fadrique@gmail.com&gt;</line>
        <line t="C" i="5" b="0" n="0">! Project   : Atlantis</line>
        <line t="C" i="6" b="0" n="0">! Author    : Fran Martinez Fadrique</line>
        <line t="C" i="7" b="0" n="0">! Language  : Object Oriented Fortran 2018</line>
        <line t="C" i="8" b="0" n="0">! Synopsis  : Base32 encoding</line>
        <line t="C" i="9" b="0" n="0">!</line>
        <line t="C" i="10" b="0" n="0">! Algorithm</line>
        <line t="C" i="11" b="0" n="0">!  - Divide the input bytes stream into blocks of 5 bytes.</line>
        <line t="C" i="12" b="0" n="0">!  - Divid3 40 bits of each 5-byte block into 8 groups of 5 bits.</line>
        <line t="C" i="13" b="0" n="0">!  - Map each group of 5 bits to 1 printable character, based on the 5-bit value</line>
        <line t="C" i="14" b="0" n="0">!    using the Base32 character set map.</line>
        <line t="C" i="15" b="0" n="0">!  - If the last 5-byte block has only 1 byte of input data, pad 4 bytes of zero</line>
        <line t="C" i="16" b="0" n="0">!    (\x0000). After encoding it as a normal block, override the last 6 characters</line>
        <line t="C" i="17" b="0" n="0">!    with 6 equal signs (======).</line>
        <line t="C" i="18" b="0" n="0">!  - If the last 5-byte block has only 2 bytes of input data, pad 3 bytes of zero</line>
        <line t="C" i="19" b="0" n="0">!    (\x0000). After encoding it as a normal block, override the last 4 characters</line>
        <line t="C" i="20" b="0" n="0">!    with 4 equal signs (====).</line>
        <line t="C" i="21" b="0" n="0">!  - If the last 5-byte block has only 3 bytes of input data, pad 2 bytes of zero</line>
        <line t="C" i="22" b="0" n="0">!    (\x0000). After encoding it as a normal block, override the last 3 characters</line>
        <line t="C" i="23" b="0" n="0">!    with 3 equal signs (===).</line>
        <line t="C" i="24" b="0" n="0">!  - If the last 5-byte block has only 4 bytes of input data, pad 1 byte of zero</line>
        <line t="C" i="25" b="0" n="0">!    (\x0000). After encoding it as a normal block, override the last 1 characters</line>
        <line t="C" i="26" b="0" n="0">!    with 1 equal sign (=).</line>
        <line t="C" i="27" b="0" n="0">!</line>
        <line t="C" i="28" b="0" n="0">!    Not yet imlemented:</line>
        <line t="C" i="29" b="0" n="0">!    Carriage return (\r) and new line (\n) are inserted into the output character</line>
        <line t="C" i="30" b="0" n="0">!    stream. They will be ignored by the decoding process.</line>
        <line t="C" i="31" b="0" n="0">!</line>
        <line t="C" i="32" b="0" n="0">! License   : This file is part of Frypto.</line>
        <line t="C" i="33" b="0" n="0">!</line>
        <line t="C" i="34" b="0" n="0">!             Frypto is free software: you can redistribute it and/or modify</line>
        <line t="C" i="35" b="0" n="0">!             it under the terms of the GNU Lesser General Public License as</line>
        <line t="C" i="36" b="0" n="0">!             published by the Free Software Foundation, either version 3 of</line>
        <line t="C" i="37" b="0" n="0">!             the License, or (at your option) any later version.</line>
        <line t="C" i="38" b="0" n="0">!</line>
        <line t="C" i="39" b="0" n="0">!             Frypto is distributed in the hope that it will be useful,</line>
        <line t="C" i="40" b="0" n="0">!             but WITHOUT ANY WARRANTY; without even the implied warranty of</line>
        <line t="C" i="41" b="0" n="0">!             MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</line>
        <line t="C" i="42" b="0" n="0">!             See the GNU Lesser General Public License for more details.</line>
        <line t="C" i="43" b="0" n="0">!</line>
        <line t="C" i="44" b="0" n="0">!             You should have received a copy of the GNU Lesser General Public</line>
        <line t="C" i="45" b="0" n="0">!             License along with Frypto.  </line>
        <line t="C" i="46" b="0" n="0">!             If not, see &lt;http://www.gnu.org/licenses/&gt;.</line>
        <line t="C" i="47" b="0" n="0">!------------------------------------------------------------------------------</line>
        <line t="C" i="48" b="0" n="0"></line>
        <line t="C" i="49" b="0" n="0">!- Start of use statements ----------------------------------------------------</line>
        <line t="C" i="50" b="0" n="0"></line>
        <line t="X" i="51" b="0" n="0">  use m_ascii_encoder</line>
        <line t="X" i="52" b="0" n="0"></line>
        <line t="C" i="53" b="0" n="0">!- End of use statements ------------------------------------------------------</line>
        <line t="C" i="54" b="0" n="0"></line>
        <line t="X" i="55" b="0" n="0">  implicit none</line>
        <line t="X" i="56" b="0" n="0"></line>
        <line t="C" i="57" b="0" n="0">!- Start of Public/Private declarations ---------------------------------------</line>
        <line t="C" i="58" b="0" n="0"></line>
        <line t="X" i="59" b="0" n="0">  private</line>
        <line t="X" i="60" b="0" n="0">  public t_base32</line>
        <line t="X" i="61" b="0" n="0">  public base32</line>
        <line t="X" i="62" b="0" n="0"></line>
        <line t="C" i="63" b="0" n="0">!- End of Public/Private declarations -----------------------------------------</line>
        <line t="C" i="64" b="0" n="0"></line>
        <line t="C" i="65" b="0" n="0">!- Start of module variable declarations --------------------------------------</line>
        <line t="C" i="66" b="0" n="0"></line>
        <line t="C" i="67" b="0" n="0">! Base32 encoding type</line>
        <line t="T" i="68" b="0" n="0">  type, extends(t_ascii_encoder) :: t_base32</line>
        <line t="X" i="69" b="0" n="0">    private</line>
        <line t="X" i="70" b="0" n="0"></line>
        <line t="X" i="71" b="0" n="0">    contains</line>
        <line t="X" i="72" b="0" n="0"></line>
        <line t="C" i="73" b="0" n="0">!     Block encoding</line>
        <line t="X" i="74" b="0" n="0">      procedure, nopass :: encode_block =&gt; base32_encode_block</line>
        <line t="X" i="75" b="0" n="0"></line>
        <line t="C" i="76" b="0" n="0">!     Block decoding</line>
        <line t="X" i="77" b="0" n="0">      procedure, nopass :: decode_block =&gt; base32_decode_block</line>
        <line t="X" i="78" b="0" n="0"></line>
        <line t="C" i="79" b="0" n="0">!     Length of the trailing part of the data</line>
        <line t="X" i="80" b="0" n="0">      procedure, nopass :: trail_len =&gt; base32_trail_len</line>
        <line t="X" i="81" b="0" n="0"></line>
        <line t="T" i="82" b="0" n="0">  end type t_base32</line>
        <line t="T" i="83" b="0" n="0"></line>
        <line t="C" i="84" b="0" n="0">! Decoded block size</line>
        <line t="X" i="85" b="0" n="0">  integer, parameter :: base32_blk_size = 5</line>
        <line t="X" i="86" b="0" n="0"></line>
        <line t="C" i="87" b="0" n="0">! Encoded block size</line>
        <line t="X" i="88" b="0" n="0">  integer, parameter :: base32_cblk_size = 8</line>
        <line t="X" i="89" b="0" n="0"></line>
        <line t="C" i="90" b="0" n="0">! Encoding lookup table (character representation)</line>
        <line t="X" i="91" b="0" n="0">  character, dimension(0:31), parameter :: base32_encode_chars = [ &amp;</line>
        <line t="X" i="92" b="0" n="0">    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', &amp;</line>
        <line t="X" i="93" b="0" n="0">    'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', &amp;</line>
        <line t="X" i="94" b="0" n="0">    '2', '3', '4', '5', '6', '7' ]</line>
        <line t="X" i="95" b="0" n="0"></line>
        <line t="C" i="96" b="0" n="0">! Encoding lookup table (byte representation)</line>
        <line t="X" i="97" b="0" n="0">  integer(kind=1), dimension(0:31), parameter :: base32_encode_dictionary = ichar(base32_encode_chars,1)</line>
        <line t="X" i="98" b="0" n="0"></line>
        <line t="C" i="99" b="0" n="0">! Decoding lookup table (byte representation)</line>
        <line t="X" i="100" b="0" n="0">  integer(kind=1), dimension(50:90), parameter :: base32_decode_dictionary = [ &amp;</line>
        <line t="X" i="101" b="0" n="0">    26_1, 27_1, 28_1, 29_1, 30_1, 31_1,  0_1,  0_1,  0_1,  0_1,  0_1, &amp;</line>
        <line t="X" i="102" b="0" n="0">     0_1,  0_1,  0_1,  0_1,  0_1,  1_1,  2_1,  3_1,  4_1,  5_1,  6_1, &amp;</line>
        <line t="X" i="103" b="0" n="0">     7_1,  8_1,  9_1, 10_1, 11_1, 12_1, 13_1, 14_1, 15_1, 16_1, 17_1, &amp;</line>
        <line t="X" i="104" b="0" n="0">    18_1, 19_1, 20_1, 21_1, 22_1, 23_1, 24_1, 25_1 ]</line>
        <line t="X" i="105" b="0" n="0"></line>
        <line t="C" i="106" b="0" n="0">! Padding constants</line>
        <line t="X" i="107" b="0" n="0">  integer(kind=1), parameter :: base32_padding = 0_1</line>
        <line t="X" i="108" b="0" n="0">  integer(kind=1), parameter :: base32_cpadding = ichar('=',1)</line>
        <line t="X" i="109" b="0" n="0"></line>
        <line t="C" i="110" b="0" n="0">! Padding map from decoded to encoded</line>
        <line t="C" i="111" b="0" n="0">! Number of coded characters as function of characters in decoded block</line>
        <line t="C" i="112" b="0" n="0">! A____ --&gt; XX======</line>
        <line t="C" i="113" b="0" n="0">! AB___ --&gt; XXXX====</line>
        <line t="C" i="114" b="0" n="0">! ABC__ --&gt; XXXXX===</line>
        <line t="C" i="115" b="0" n="0">! ABCD_ --&gt; XXXXXXX=</line>
        <line t="C" i="116" b="0" n="0">! ABCDE --&gt; XXXXXXXX</line>
        <line t="X" i="117" b="0" n="0">  integer, dimension(1:5), parameter :: base32_encoded_trailing = [ 2, 4, 5, 7, 8 ]</line>
        <line t="X" i="118" b="0" n="0"></line>
        <line t="C" i="119" b="0" n="0">! Padding map from encoded to decoded</line>
        <line t="C" i="120" b="0" n="0">! Number of decoded characters as function of characters in coded block</line>
        <line t="C" i="121" b="0" n="0">! XX====== --&gt; A____</line>
        <line t="C" i="122" b="0" n="0">! XXXX==== --&gt; AB___</line>
        <line t="C" i="123" b="0" n="0">! XXXXX=== --&gt; ABC__</line>
        <line t="C" i="124" b="0" n="0">! XXXXXXX= --&gt; ABCD_</line>
        <line t="C" i="125" b="0" n="0">! XXXXXXXX --&gt; ABCDE</line>
        <line t="X" i="126" b="0" n="0">  integer, dimension(1:8), parameter :: base32_decoded_trailing = [ 0, 1, 0, 2, 3, 0, 4, 5 ]</line>
        <line t="X" i="127" b="0" n="0"></line>
        <line t="C" i="128" b="0" n="0">! Constructor interface</line>
        <line t="X" i="129" b="0" n="0">  interface base32</line>
        <line t="X" i="130" b="0" n="0">    module procedure base32_default</line>
        <line t="X" i="131" b="0" n="0">    module procedure base32_main</line>
        <line t="X" i="132" b="0" n="0">  end interface base32</line>
        <line t="X" i="133" b="0" n="0"></line>
        <line t="C" i="134" b="0" n="0">!- End of module variable declarations ----------------------------------------</line>
        <line t="C" i="135" b="0" n="0"></line>
        <line t="X" i="136" b="0" n="0">contains</line>
        <line t="X" i="137" b="0" n="0"></line>
        <line t="C" i="138" b="0" n="0">! Default constructor</line>
        <line k="base32_default" t="F" i="139" b="1" n="1">pure function base32_default() result(res)</line>
        <line t="F" i="140" b="1" n="1"></line>
        <line t="C" i="141" b="1" n="1">! The base32 context</line>
        <line t="X" i="142" b="1" n="1">  type(t_base32) :: res</line>
        <line t="X" i="143" b="1" n="1"></line>
        <line t="C" i="144" b="1" n="1">! Initialise the processing structures</line>
        <line t="X" i="145" b="1" n="1">  res = base32( .true. )</line>
        <line t="X" i="146" b="1" n="1"></line>
        <line t="EF" i="147" b="1" n="1">end function base32_default</line>
        <line t="EF" i="148" b="1" n="1"></line>
        <line t="EF" i="149" b="1" n="1"></line>
        <line t="C" i="150" b="1" n="1">! Main constructor</line>
        <line k="base32_main" t="F" i="151" b="1" n="1">pure function base32_main( padding ) result(res)</line>
        <line t="F" i="152" b="1" n="1"></line>
        <line t="C" i="153" b="1" n="1">! Flag to generate encoding with padding</line>
        <line t="X" i="154" b="1" n="1">  logical, intent(in) :: padding</line>
        <line t="X" i="155" b="1" n="1"></line>
        <line t="C" i="156" b="1" n="1">! The base32 context</line>
        <line t="X" i="157" b="1" n="1">  type(t_base32) :: res</line>
        <line t="X" i="158" b="1" n="1"></line>
        <line t="C" i="159" b="1" n="1">! Initialise the processing structures</line>
        <line t="X" i="160" b="1" n="1">  call res%initialise( base32_blk_size, base32_cblk_size, &amp;</line>
        <line t="X" i="161" b="1" n="1">                       base32_padding, base32_cpadding, &amp;</line>
        <line t="X" i="162" b="1" n="1">                       base32_encoded_trailing, base32_decoded_trailing, &amp;</line>
        <line t="X" i="163" b="1" n="1">                       padding )</line>
        <line t="X" i="164" b="1" n="1"></line>
        <line t="EF" i="165" b="1" n="1">end function base32_main</line>
        <line t="EF" i="166" b="1" n="1"></line>
        <line t="EF" i="167" b="1" n="1"></line>
        <line t="C" i="168" b="1" n="1">! Base32 encode one block</line>
        <line k="base32_encode_block" t="S" i="169" b="1" n="1">pure subroutine base32_encode_block( blk, cblk )</line>
        <line t="S" i="170" b="1" n="1"></line>
        <line t="C" i="171" b="1" n="1">! The block to encode (5 bytes)</line>
        <line t="X" i="172" b="1" n="1">  integer(kind=1), dimension(:), intent(in) :: blk</line>
        <line t="X" i="173" b="1" n="1"></line>
        <line t="C" i="174" b="1" n="1">! The encoded block (8 bytes)</line>
        <line t="X" i="175" b="1" n="1">  integer(kind=1), dimension(:), intent(out) :: cblk</line>
        <line t="X" i="176" b="1" n="1"></line>
        <line t="C" i="177" b="1" n="1">! Patterns</line>
        <line t="C" i="178" b="1" n="1">!        1         2         2         3         4         4         5         5         6         7         7         8  res</line>
        <line t="C" i="179" b="1" n="1">!        1         1         2         2         2         3         3         4         4         4         5         5  blk</line>
        <line t="C" i="180" b="1" n="1">!        1         2         3         4         5         6         7         8         9        10        11        12  pattern</line>
        <line t="C" i="181" b="1" n="1">! 11111000  00000111  11000000  00111110  00000001  11110000  00001111  10000000  01111100  00000011  11100000  00011111</line>
        <line t="C" i="182" b="1" n="1">!    z'F8'     z'07'     z'C0'     z'3E'     z'01'     z'F0'     z'0F'     z'80'     z'7C'     z'03'     z'E0'     z'1F'</line>
        <line t="C" i="183" b="1" n="1">! gfortran does not accept -128_1, therefore it is initialise as kind=2 and then converted to kind=1 </line>
        <line t="X" i="184" b="1" n="1">  integer(kind=2), dimension(12) , parameter :: pattern2 = [ &amp;</line>
        <line t="X" i="185" b="1" n="1">      -8_2, 7_2, -64_2, 62_2, 1_2, -16_2, 15_2, -128_2, 124_2, 3_2, -32_2, 31_2 ]</line>
        <line t="X" i="186" b="1" n="1">  integer(kind=1), dimension(12) :: pattern</line>
        <line t="X" i="187" b="1" n="1"></line>
        <line t="C" i="188" b="1" n="1">! Local variables</line>
        <line t="X" i="189" b="1" n="1">  integer(kind=1) :: i5bits</line>
        <line t="X" i="190" b="1" n="1"></line>
        <line t="C" i="191" b="1" n="1">! Initialise</line>
        <line t="X" i="192" b="1" n="1">  pattern = int( pattern2, 1 )</line>
        <line t="X" i="193" b="1" n="1"></line>
        <line t="C" i="194" b="1" n="1">! Assign the resulting bytes from the 6-bit blocks</line>
        <line t="X" i="195" b="1" n="1">  i5bits = ishft( iand( blk(1), pattern(1) ), -3 )</line>
        <line t="X" i="196" b="1" n="1">  cblk(1) = base32_encode_dictionary(i5bits)</line>
        <line t="X" i="197" b="1" n="1">  i5bits = ishft( iand( blk(1), pattern(2) ), 2 ) + &amp;</line>
        <line t="X" i="198" b="1" n="1">           ishft( iand( blk(2), pattern(3) ), -6 )</line>
        <line t="X" i="199" b="1" n="1">  cblk(2) = base32_encode_dictionary(i5bits)</line>
        <line t="X" i="200" b="1" n="1">  i5bits = ishft( iand( blk(2), pattern(4) ), -1 )</line>
        <line t="X" i="201" b="1" n="1">  cblk(3) = base32_encode_dictionary(i5bits)</line>
        <line t="X" i="202" b="1" n="1">  i5bits = ishft( iand( blk(2), pattern(5) ), 4 ) + &amp;</line>
        <line t="X" i="203" b="1" n="1">           ishft( iand( blk(3), pattern(6) ), -4 )</line>
        <line t="X" i="204" b="1" n="1">  cblk(4) = base32_encode_dictionary(i5bits)</line>
        <line t="X" i="205" b="1" n="1">  i5bits = ishft( iand( blk(3), pattern(7) ), 1 ) + &amp;</line>
        <line t="X" i="206" b="1" n="1">           ishft( iand( blk(4), pattern(8) ), -7 )</line>
        <line t="X" i="207" b="1" n="1">  cblk(5) = base32_encode_dictionary(i5bits)</line>
        <line t="X" i="208" b="1" n="1">  i5bits = ishft( iand( blk(4), pattern(9) ), -2 )</line>
        <line t="X" i="209" b="1" n="1">  cblk(6) = base32_encode_dictionary(i5bits)</line>
        <line t="X" i="210" b="1" n="1">  i5bits = ishft( iand( blk(4), pattern(10) ), 3 ) + &amp;</line>
        <line t="X" i="211" b="1" n="1">           ishft( iand( blk(5), pattern(11) ), -5 )</line>
        <line t="X" i="212" b="1" n="1">  cblk(7) = base32_encode_dictionary(i5bits)</line>
        <line t="X" i="213" b="1" n="1">  i5bits = iand( blk(5), pattern(12) )</line>
        <line t="X" i="214" b="1" n="1">  cblk(8) = base32_encode_dictionary(i5bits)</line>
        <line t="X" i="215" b="1" n="1"></line>
        <line t="ES" i="216" b="1" n="1">end subroutine base32_encode_block</line>
        <line t="ES" i="217" b="1" n="1"></line>
        <line t="ES" i="218" b="1" n="1"></line>
        <line t="C" i="219" b="1" n="1">! Base32 encode one block</line>
        <line k="base32_decode_block" t="S" i="220" b="1" n="1">pure subroutine base32_decode_block( cblk, blk )</line>
        <line t="S" i="221" b="1" n="1"></line>
        <line t="C" i="222" b="1" n="1">! The block to decode (8 bytes)</line>
        <line t="X" i="223" b="1" n="1">  integer(kind=1), dimension(:), intent(in) :: cblk</line>
        <line t="X" i="224" b="1" n="1"></line>
        <line t="C" i="225" b="1" n="1">! The decoded block (5 bytes)</line>
        <line t="X" i="226" b="1" n="1">  integer(kind=1), dimension(:), intent(out) :: blk</line>
        <line t="X" i="227" b="1" n="1"></line>
        <line t="C" i="228" b="1" n="1">! Patterns</line>
        <line t="C" i="229" b="1" n="1">!        1         1         2         2         2         3         3         4         4         4         5         5  res</line>
        <line t="C" i="230" b="1" n="1">!        1         2         2         3         4         4         5         5         6         7         7         8  blk</line>
        <line t="C" i="231" b="1" n="1">!        1         2         3         4         5         6         7         8         9        10        11        12  pattern</line>
        <line t="C" i="232" b="1" n="1">! 00011111  00011100  00000011  00011111  00010000  00001111  00011110  00000001  00011111  00011000  00000111  00011111</line>
        <line t="C" i="233" b="1" n="1">!    z'1F'     z'1C'     z'03'     z'1F'     z'10'     z'0F'     z'1E'     z'01'     z'1F'     z'18'     z'07'     z'1F'</line>
        <line t="X" i="234" b="1" n="1">  integer(kind=1), dimension(12) , parameter :: pattern = [ &amp;</line>
        <line t="X" i="235" b="1" n="1">       31_1, 28_1, 3_1, 31_1, 16_1, 15_1, 30_1, 1_1, 31_1, 24_1, 7_1, 31_1 ]</line>
        <line t="X" i="236" b="1" n="1">  integer(kind=1), dimension(8) :: i5bit</line>
        <line t="X" i="237" b="1" n="1"></line>
        <line t="C" i="238" b="1" n="1">! Decode the 5-bit representation</line>
        <line t="X" i="239" b="1" n="1">  i5bit = base32_decode_dictionary( cblk )</line>
        <line t="X" i="240" b="1" n="1"></line>
        <line t="C" i="241" b="1" n="1">! Assign the resulting bytes from the 6-bit blocks</line>
        <line t="X" i="242" b="1" n="1">  blk(1) = ishft( iand( i5bit(1), pattern(1) ), 3_1 ) + &amp;</line>
        <line t="X" i="243" b="1" n="1">           ishft( iand( i5bit(2), pattern(2) ), -2_1 )</line>
        <line t="X" i="244" b="1" n="1">  blk(2) = ishft( iand( i5bit(2), pattern(3) ), 6_1 ) + &amp;</line>
        <line t="X" i="245" b="1" n="1">           ishft( iand( i5bit(3), pattern(4) ), 1_1 ) + &amp;</line>
        <line t="X" i="246" b="1" n="1">           ishft( iand( i5bit(4), pattern(5) ), -4_1 )</line>
        <line t="X" i="247" b="1" n="1">  blk(3) = ishft( iand( i5bit(4), pattern(6) ), 4_1 ) + &amp;</line>
        <line t="X" i="248" b="1" n="1">           ishft( iand( i5bit(5), pattern(7) ), -1_1 )</line>
        <line t="X" i="249" b="1" n="1">  blk(4) = ishft( iand( i5bit(5), pattern(8) ), 7_1 ) + &amp;</line>
        <line t="X" i="250" b="1" n="1">           ishft( iand( i5bit(6), pattern(9) ), 2_1 ) + &amp;</line>
        <line t="X" i="251" b="1" n="1">           ishft( iand( i5bit(7), pattern(10) ), -3_1 )</line>
        <line t="X" i="252" b="1" n="1">  blk(5) = ishft( iand( i5bit(7), pattern(11) ), 5_1 ) + &amp;</line>
        <line t="X" i="253" b="1" n="1">           iand( i5bit(8), pattern(12) )</line>
        <line t="X" i="254" b="1" n="1"></line>
        <line t="ES" i="255" b="1" n="1">end subroutine base32_decode_block</line>
        <line t="ES" i="256" b="1" n="1"></line>
        <line t="ES" i="257" b="1" n="1"></line>
        <line t="C" i="258" b="1" n="1">! Return length of the trailing part of the data</line>
        <line k="base32_trail_len" t="F" i="259" b="1" n="1">pure function base32_trail_len( text ) result(res)</line>
        <line t="F" i="260" b="1" n="1"></line>
        <line t="C" i="261" b="1" n="1">! The encoded block (4 bytes)</line>
        <line t="X" i="262" b="1" n="1">  integer(kind=1), dimension(:), intent(in) :: text</line>
        <line t="X" i="263" b="1" n="1"></line>
        <line t="C" i="264" b="1" n="1">! The encoded data without padding</line>
        <line t="X" i="265" b="1" n="1">  integer :: res</line>
        <line t="X" i="266" b="1" n="1"></line>
        <line t="C" i="267" b="1" n="1">! Local variables</line>
        <line t="X" i="268" b="1" n="1">  integer(kind=1), dimension(base32_cblk_size) :: cblk</line>
        <line t="X" i="269" b="1" n="1"></line>
        <line t="C" i="270" b="1" n="1">! Initialise</line>
        <line t="X" i="271" b="1" n="1">  cblk = text(size(text)-base32_cblk_size+1:)</line>
        <line t="X" i="272" b="1" n="1"></line>
        <line t="C" i="273" b="1" n="1">! Return the length</line>
        <line t="X" i="274" b="1" n="1">  res = count( cblk /= base32_cpadding )</line>
        <line t="X" i="275" b="1" n="1"></line>
        <line t="EF" i="276" b="1" n="1">end function base32_trail_len</line>
        <line t="EF" i="277" b="1" n="1"></line>
        <line t="M" i="278" b="1" n="1">end module m_base32</line>
        <line t="M" i="279" b="1" n="1"></line>
    </code>
</fmx>