<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../fmx.xsl"?>
<fmx xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="m_uuid.f90">
    <context>
        <time>2025-03-09T18:24:38</time>
        <version>1.0.0.1</version>
        <path>src</path>
        <path_to_root>../</path_to_root>
        <project>Frypto</project>
        <name>m_uuid.f90</name>
        <copyright>Copyright © 2020, Fran Martinez Fadrique &lt;Fran.Martinez.Fadrique@gmail.com&gt;</copyright>
    </context>
    <units>
        <unit name="m_uuid" type="module">
            <main>
                <lines>
                    <source percent="38.64">68</source>
                    <comments percent="36.36">64</comments>
                    <empty percent="25.00">44</empty>
                    <total>176</total>
                </lines>
                <complexity>
                    <minimum>0</minimum>
                    <maximum>0</maximum>
                    <average>0.00</average>
                </complexity>
                <nesting>
                    <minimum>0</minimum>
                    <maximum>0</maximum>
                    <average>0.00</average>
                </nesting>
                <methods>0</methods>
            </main>
            <methods>
                <method name="uuid_default" type="function">
                    <statistics>
                        <lines>
                            <source percent="29.41">10</source>
                            <comments percent="44.12">15</comments>
                            <empty percent="26.47">9</empty>
                            <total>34</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="uuid_encode_bytes" type="function">
                    <statistics>
                        <lines>
                            <source percent="50.00">24</source>
                            <comments percent="22.92">11</comments>
                            <empty percent="27.08">13</empty>
                            <total>48</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>6</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="uuid_equal_to" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">6</source>
                            <comments percent="27.78">5</comments>
                            <empty percent="38.89">7</empty>
                            <total>18</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="uuid_from_bytes" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">9</source>
                            <comments percent="29.63">8</comments>
                            <empty percent="37.04">10</empty>
                            <total>27</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="uuid_get_clock_seq_hi_low" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">5</source>
                            <comments percent="26.67">4</comments>
                            <empty percent="40.00">6</empty>
                            <total>15</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="uuid_get_node" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">5</source>
                            <comments percent="26.67">4</comments>
                            <empty percent="40.00">6</empty>
                            <total>15</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="uuid_get_time_hi_and_version" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">5</source>
                            <comments percent="26.67">4</comments>
                            <empty percent="40.00">6</empty>
                            <total>15</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="uuid_get_time_low" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">5</source>
                            <comments percent="26.67">4</comments>
                            <empty percent="40.00">6</empty>
                            <total>15</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="uuid_get_time_mid" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">5</source>
                            <comments percent="26.67">4</comments>
                            <empty percent="40.00">6</empty>
                            <total>15</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="uuid_get_variant" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">5</source>
                            <comments percent="26.67">4</comments>
                            <empty percent="40.00">6</empty>
                            <total>15</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="uuid_get_version" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">5</source>
                            <comments percent="26.67">4</comments>
                            <empty percent="40.00">6</empty>
                            <total>15</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="uuid_name" type="function">
                    <statistics>
                        <lines>
                            <source percent="38.10">16</source>
                            <comments percent="30.95">13</comments>
                            <empty percent="30.95">13</empty>
                            <total>42</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>4</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>3</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="uuid_namespace_and_name" type="function">
                    <statistics>
                        <lines>
                            <source percent="40.35">23</source>
                            <comments percent="29.82">17</comments>
                            <empty percent="29.82">17</empty>
                            <total>57</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>4</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>3</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="uuid_not_equal_to" type="function">
                    <statistics>
                        <lines>
                            <source percent="45.45">10</source>
                            <comments percent="22.73">5</comments>
                            <empty percent="31.82">7</empty>
                            <total>22</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="uuid_set_node_from_mac" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="44.83">13</source>
                            <comments percent="27.59">8</comments>
                            <empty percent="27.59">8</empty>
                            <total>29</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="uuid_set_random_clock" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="41.67">10</source>
                            <comments percent="29.17">7</comments>
                            <empty percent="29.17">7</empty>
                            <total>24</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="uuid_set_timestamp" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="63.16">48</source>
                            <comments percent="18.42">14</comments>
                            <empty percent="18.42">14</empty>
                            <total>76</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>7</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="uuid_set_variant" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="31.58">6</source>
                            <comments percent="36.84">7</comments>
                            <empty percent="31.58">6</empty>
                            <total>19</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="uuid_set_version" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="31.58">6</source>
                            <comments percent="36.84">7</comments>
                            <empty percent="31.58">6</empty>
                            <total>19</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="uuid_time_and_mac" type="function">
                    <statistics>
                        <lines>
                            <source percent="23.81">10</source>
                            <comments percent="50.00">21</comments>
                            <empty percent="26.19">11</empty>
                            <total>42</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="uuid_to_bytes" type="function">
                    <statistics>
                        <lines>
                            <source percent="47.37">9</source>
                            <comments percent="21.05">4</comments>
                            <empty percent="31.58">6</empty>
                            <total>19</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="uuid_to_string" type="function">
                    <statistics>
                        <lines>
                            <source percent="59.32">35</source>
                            <comments percent="18.64">11</comments>
                            <empty percent="22.03">13</empty>
                            <total>59</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>7</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>3</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
            </methods>
            <statistics>
                <lines>
                    <source percent="41.42">338</source>
                    <comments percent="30.02">245</comments>
                    <empty percent="28.55">233</empty>
                    <total>816</total>
                </lines>
                <complexity>
                    <minimum>1</minimum>
                    <maximum>7</maximum>
                    <average>2.09</average>
                </complexity>
                <nesting>
                    <minimum>1</minimum>
                    <maximum>3</maximum>
                    <average>1.41</average>
                </nesting>
                <methods>22</methods>
            </statistics>
        </unit>
    </units>
    <statistics>
        <lines>
            <source percent="41.42">338</source>
            <comments percent="30.02">245</comments>
            <empty percent="28.55">233</empty>
            <total>816</total>
        </lines>
        <complexity>
            <minimum>1</minimum>
            <maximum>7</maximum>
            <average>2.09</average>
        </complexity>
        <nesting>
            <minimum>1</minimum>
            <maximum>3</maximum>
            <average>1.41</average>
        </nesting>
        <methods>22</methods>
    </statistics>
    <code>
        <line t="M" i="1" b="0" n="0">module m_uuid</line>
        <line t="M" i="2" b="0" n="0"></line>
        <line t="C" i="3" b="0" n="0">! -----------------------------------------------------------------------------</line>
        <line t="C" i="4" b="0" n="0">! Copyright : 2022, Fran Martinez Fadrique &lt;Fran.Martinez.Fadrique@gmail.com&gt;</line>
        <line t="C" i="5" b="0" n="0">! Project   : Atlantis</line>
        <line t="C" i="6" b="0" n="0">! Author    : Fran Martinez Fadrique</line>
        <line t="C" i="7" b="0" n="0">! Language  : Object Oriented Fortran 2018</line>
        <line t="C" i="8" b="0" n="0">! Synopsis  : UUID Universally Unique Identifier (128-bit)</line>
        <line t="C" i="9" b="0" n="0">!             Ref: https://en.wikipedia.org/wiki/Universally_unique_identifier</line>
        <line t="C" i="10" b="0" n="0">!                  https://tools.ietf.org/html/rfc4122</line>
        <line t="C" i="11" b="0" n="0">!</line>
        <line t="C" i="12" b="0" n="0">! License   : This file is part of Frypto.</line>
        <line t="C" i="13" b="0" n="0">!</line>
        <line t="C" i="14" b="0" n="0">!             Frypto is free software: you can redistribute it and/or modify</line>
        <line t="C" i="15" b="0" n="0">!             it under the terms of the GNU Lesser General Public License as</line>
        <line t="C" i="16" b="0" n="0">!             published by the Free Software Foundation, either version 3 of</line>
        <line t="C" i="17" b="0" n="0">!             the License, or (at your option) any later version.</line>
        <line t="C" i="18" b="0" n="0">!</line>
        <line t="C" i="19" b="0" n="0">!             Frypto is distributed in the hope that it will be useful,</line>
        <line t="C" i="20" b="0" n="0">!             but WITHOUT ANY WARRANTY; without even the implied warranty of</line>
        <line t="C" i="21" b="0" n="0">!             MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</line>
        <line t="C" i="22" b="0" n="0">!             See the GNU Lesser General Public License for more details.</line>
        <line t="C" i="23" b="0" n="0">!</line>
        <line t="C" i="24" b="0" n="0">!             You should have received a copy of the GNU Lesser General Public</line>
        <line t="C" i="25" b="0" n="0">!             License along with Frypto.  </line>
        <line t="C" i="26" b="0" n="0">!             If not, see &lt;http://www.gnu.org/licenses/&gt;.</line>
        <line t="C" i="27" b="0" n="0">! -----------------------------------------------------------------------------</line>
        <line t="C" i="28" b="0" n="0"></line>
        <line t="C" i="29" b="0" n="0">! Dependencies ----------------------------------------------------------------</line>
        <line t="C" i="30" b="0" n="0"></line>
        <line t="X" i="31" b="0" n="0">  use m_util_convert</line>
        <line t="X" i="32" b="0" n="0">  use m_object</line>
        <line t="X" i="33" b="0" n="0"></line>
        <line t="X" i="34" b="0" n="0">  use m_iso8601_date_time</line>
        <line t="X" i="35" b="0" n="0">  use m_sha1</line>
        <line t="X" i="36" b="0" n="0">  use m_md5</line>
        <line t="X" i="37" b="0" n="0"></line>
        <line t="X" i="38" b="0" n="0">  implicit none</line>
        <line t="X" i="39" b="0" n="0"></line>
        <line t="C" i="40" b="0" n="0">! Public/Private declarations -------------------------------------------------</line>
        <line t="C" i="41" b="0" n="0"></line>
        <line t="X" i="42" b="0" n="0">  private</line>
        <line t="X" i="43" b="0" n="0">  public t_uuid, uuid</line>
        <line t="X" i="44" b="0" n="0"></line>
        <line t="X" i="45" b="0" n="0">  public uuid_namespace_dns, &amp;</line>
        <line t="X" i="46" b="0" n="0">         uuid_namespace_url, &amp;</line>
        <line t="X" i="47" b="0" n="0">         uuid_namespace_iso_oid, &amp;</line>
        <line t="X" i="48" b="0" n="0">         uuid_namespace_x500</line>
        <line t="X" i="49" b="0" n="0"></line>
        <line t="X" i="50" b="0" n="0">  public uuid_nil</line>
        <line t="X" i="51" b="0" n="0"></line>
        <line t="C" i="52" b="0" n="0">! Module declarations ---------------------------------------------------------</line>
        <line t="C" i="53" b="0" n="0"></line>
        <line t="C" i="54" b="0" n="0">! Variant values</line>
        <line t="X" i="55" b="0" n="0"> integer(kind=1), parameter :: uuid_variant_rfc4122 = int(z'08',1)</line>
        <line t="X" i="56" b="0" n="0"></line>
        <line t="C" i="57" b="0" n="0">! Variant bit masks</line>
        <line t="X" i="58" b="0" n="0"> integer(kind=2), parameter :: uuid_variant_mask_get = int(z'8000',2)</line>
        <line t="X" i="59" b="0" n="0"> integer(kind=2), parameter :: uuid_variant_mask_set = int(z'3fff',2)</line>
        <line t="X" i="60" b="0" n="0"></line>
        <line t="C" i="61" b="0" n="0">! Version bit masks</line>
        <line t="X" i="62" b="0" n="0"> integer(kind=2), parameter :: uuid_version_mask_get = int(z'f000',2)</line>
        <line t="X" i="63" b="0" n="0"> integer(kind=2), parameter :: uuid_version_mask_set = int(z'0fff',2)</line>
        <line t="X" i="64" b="0" n="0"></line>
        <line t="C" i="65" b="0" n="0">! Default UUID separator</line>
        <line t="X" i="66" b="0" n="0">  character, parameter :: uuid_default_separator = '-'</line>
        <line t="X" i="67" b="0" n="0"></line>
        <line t="C" i="68" b="0" n="0">! Curly brackets</line>
        <line t="X" i="69" b="0" n="0">  character, parameter :: uuid_lbracket = '{'</line>
        <line t="X" i="70" b="0" n="0">  character, parameter :: uuid_rbracket = '}'</line>
        <line t="X" i="71" b="0" n="0"></line>
        <line t="C" i="72" b="0" n="0">! UUID Universally Unique Identifier (128-bit)</line>
        <line t="T" i="73" b="0" n="0">  type, extends(t_object) :: t_uuid</line>
        <line t="X" i="74" b="0" n="0">    private</line>
        <line t="X" i="75" b="0" n="0"></line>
        <line t="C" i="76" b="0" n="0">!     Integer giving the low 32 bits of the time</line>
        <line t="X" i="77" b="0" n="0">      integer(kind=4) :: time_low = 0_4</line>
        <line t="X" i="78" b="0" n="0"></line>
        <line t="C" i="79" b="0" n="0">!     Integer giving the middle 16 bits of the time</line>
        <line t="X" i="80" b="0" n="0">      integer(kind=2) :: time_mid = 0_2</line>
        <line t="X" i="81" b="0" n="0"></line>
        <line t="C" i="82" b="0" n="0">!     4-bit "version" in the most significant bits, followed by the high 12 bits of the time</line>
        <line t="X" i="83" b="0" n="0">      integer(kind=2) :: time_hi_and_version = 0_2</line>
        <line t="X" i="84" b="0" n="0"></line>
        <line t="C" i="85" b="0" n="0">!     1-3 bit "variant" in the most significant bits, followed by the 13-15 bit clock sequence</line>
        <line t="X" i="86" b="0" n="0">      integer(kind=2) :: clock_seq_hi_low = 0_2</line>
        <line t="X" i="87" b="0" n="0"></line>
        <line t="C" i="88" b="0" n="0">!     The 48-bit node id</line>
        <line t="X" i="89" b="0" n="0">      integer(kind=1), dimension(6) :: node = 0_1</line>
        <line t="X" i="90" b="0" n="0"></line>
        <line t="X" i="91" b="0" n="0">    contains</line>
        <line t="X" i="92" b="0" n="0"></line>
        <line t="C" i="93" b="0" n="0">!     Getters</line>
        <line t="X" i="94" b="0" n="0">      procedure :: get_time_low =&gt; uuid_get_time_low</line>
        <line t="X" i="95" b="0" n="0">      procedure :: get_time_mid =&gt; uuid_get_time_mid</line>
        <line t="X" i="96" b="0" n="0">      procedure :: get_time_hi_and_version =&gt; uuid_get_time_hi_and_version</line>
        <line t="X" i="97" b="0" n="0">      procedure :: get_clock_seq_hi_low =&gt; uuid_get_clock_seq_hi_low</line>
        <line t="X" i="98" b="0" n="0">      procedure :: get_node =&gt; uuid_get_node</line>
        <line t="X" i="99" b="0" n="0">      procedure :: get_version =&gt; uuid_get_version</line>
        <line t="X" i="100" b="0" n="0">      procedure :: get_variant =&gt; uuid_get_variant</line>
        <line t="X" i="101" b="0" n="0"></line>
        <line t="C" i="102" b="0" n="0">!     Comparison operators</line>
        <line t="X" i="103" b="0" n="0">      generic :: operator(==) =&gt; uuid_equal_to</line>
        <line t="X" i="104" b="0" n="0">      procedure, private :: uuid_equal_to</line>
        <line t="X" i="105" b="0" n="0">      generic :: operator(/=) =&gt; uuid_not_equal_to</line>
        <line t="X" i="106" b="0" n="0">      procedure, private :: uuid_not_equal_to</line>
        <line t="X" i="107" b="0" n="0"></line>
        <line t="C" i="108" b="0" n="0">!     Set the node from the MAC in the UUID</line>
        <line t="X" i="109" b="0" n="0">      procedure, private :: set_node_from_mac =&gt; uuid_set_node_from_mac</line>
        <line t="X" i="110" b="0" n="0"></line>
        <line t="C" i="111" b="0" n="0">!     Set the time stamp in the UUID</line>
        <line t="X" i="112" b="0" n="0">      procedure, private :: set_timestamp =&gt; uuid_set_timestamp</line>
        <line t="X" i="113" b="0" n="0"></line>
        <line t="C" i="114" b="0" n="0">!     Set a random clock in the UUID</line>
        <line t="X" i="115" b="0" n="0">      procedure, private :: set_random_clock =&gt; uuid_set_random_clock</line>
        <line t="X" i="116" b="0" n="0"></line>
        <line t="C" i="117" b="0" n="0">!     Set the version in the UUID</line>
        <line t="X" i="118" b="0" n="0">      procedure, private :: set_version =&gt; uuid_set_version</line>
        <line t="X" i="119" b="0" n="0"></line>
        <line t="C" i="120" b="0" n="0">!     Set the variant in the UUID</line>
        <line t="X" i="121" b="0" n="0">      procedure, private :: set_variant =&gt; uuid_set_variant</line>
        <line t="X" i="122" b="0" n="0"></line>
        <line t="C" i="123" b="0" n="0">!     Assign the UUID fields from an array of bytes</line>
        <line t="X" i="124" b="0" n="0">      procedure, private :: from_bytes =&gt; uuid_from_bytes</line>
        <line t="X" i="125" b="0" n="0"></line>
        <line t="C" i="126" b="0" n="0">!     Generate the UUID as a character string</line>
        <line t="X" i="127" b="0" n="0">      procedure :: to_string =&gt; uuid_to_string</line>
        <line t="X" i="128" b="0" n="0"></line>
        <line t="C" i="129" b="0" n="0">!     Generate the UID as a stream of bytes</line>
        <line t="X" i="130" b="0" n="0">      procedure :: to_bytes =&gt; uuid_to_bytes</line>
        <line t="X" i="131" b="0" n="0"></line>
        <line t="T" i="132" b="0" n="0">  end type t_uuid</line>
        <line t="T" i="133" b="0" n="0"></line>
        <line t="C" i="134" b="0" n="0">! Constructor interface</line>
        <line t="X" i="135" b="0" n="0">  interface uuid</line>
        <line t="X" i="136" b="0" n="0">    module procedure uuid_default</line>
        <line t="X" i="137" b="0" n="0">    module procedure uuid_time_and_mac</line>
        <line t="X" i="138" b="0" n="0">    module procedure uuid_namespace_and_name</line>
        <line t="X" i="139" b="0" n="0">    module procedure uuid_name</line>
        <line t="X" i="140" b="0" n="0">  end interface uuid</line>
        <line t="X" i="141" b="0" n="0"></line>
        <line t="C" i="142" b="0" n="0">! Nil UUID</line>
        <line t="C" i="143" b="0" n="0">! RFC 4122: 4.1.7.  Nil UUID</line>
        <line t="C" i="144" b="0" n="0">! t_uuid( z'00000000', z'0000', z'0000', z'0000', [ z'00', z'00', z'00', z'00', z'00', z'00' ] )</line>
        <line t="X" i="145" b="0" n="0">  type(t_uuid), parameter :: uuid_nil = &amp;  ! 00000000-0000-0000-0000-000000000000</line>
        <line t="X" i="146" b="0" n="0">    t_uuid( 0, 0_2, 0_2, 0_2, [ 0_1, 0_1, 0_1, 0_1, 0_1, 0_1 ] )</line>
        <line t="X" i="147" b="0" n="0"></line>
        <line t="C" i="148" b="0" n="0">! Predefined UUID for name generation</line>
        <line t="C" i="149" b="0" n="0">! RFC 4122: Appendix C - Some Name Space IDs</line>
        <line t="C" i="150" b="0" n="0"></line>
        <line t="C" i="151" b="0" n="0">! Name string is a fully-qualified domain name</line>
        <line t="C" i="152" b="0" n="0">! t_uuid( z'6ba7b810', z'9dad', z'11d1', z'80b4', [ z'00', z'c0', z'4f', z'd4', z'30', z'c8' ] )</line>
        <line t="X" i="153" b="0" n="0">  type(t_uuid), parameter :: uuid_namespace_dns = &amp;  ! 6ba7b810-9dad-11d1-80b4-00c04fd430c8</line>
        <line t="X" i="154" b="0" n="0">    t_uuid( 1806153744, -25171_2, 4561_2, -32588_2, [ 0_1, -64_1, 79_1, -44_1, 48_1, -56_1 ] )</line>
        <line t="X" i="155" b="0" n="0"></line>
        <line t="C" i="156" b="0" n="0">! Name string is a URL</line>
        <line t="C" i="157" b="0" n="0">! t_uuid( z'6ba7b811', z'9dad', z'11d1', z'80b4', [ z'00', z'c0', z'4f', z'd4', z'30', z'c8' ] )</line>
        <line t="X" i="158" b="0" n="0">  type(t_uuid), parameter :: uuid_namespace_url = &amp;  ! 6ba7b811-9dad-11d1-80b4-00c04fd430c8</line>
        <line t="X" i="159" b="0" n="0">    t_uuid( 1806153745, -25171_2, 4561_2, -32588_2, [ 0_1, -64_1, 79_1, -44_1, 48_1, -56_1 ] )</line>
        <line t="X" i="160" b="0" n="0"></line>
        <line t="C" i="161" b="0" n="0">! Name string is an ISO OID</line>
        <line t="C" i="162" b="0" n="0">! t_uuid( z'6ba7b812', z'9dad', z'11d1', z'80b4', [ z'00', z'c0', z'4f', z'd4', z'30', z'c8' ] )</line>
        <line t="X" i="163" b="0" n="0">  type(t_uuid), parameter :: uuid_namespace_iso_oid = &amp; ! 6ba7b812-9dad-11d1-80b4-00c04fd430c8</line>
        <line t="X" i="164" b="0" n="0">    t_uuid( 1806153746, -25171_2, 4561_2, -32588_2, [ 0_1, -64_1, 79_1, -44_1, 48_1, -56_1 ] )</line>
        <line t="X" i="165" b="0" n="0"></line>
        <line t="C" i="166" b="0" n="0">! Name string is an X.500 DN (in DER or a text output format)</line>
        <line t="C" i="167" b="0" n="0">! t_uuid( z'6ba7b814', z'9dad', z'11d1', z'80b4', [ z'00', z'c0', z'4f', z'd4', z'30', z'c8' ] )</line>
        <line t="X" i="168" b="0" n="0">  type(t_uuid), parameter :: uuid_namespace_x500 = &amp;  ! 6ba7b814-9dad-11d1-80b4-00c04fd430c8</line>
        <line t="X" i="169" b="0" n="0">    t_uuid( 1806153748, -25171_2, 4561_2, -32588_2, [ 0_1, -64_1, 79_1, -44_1, 48_1, -56_1 ] )</line>
        <line t="X" i="170" b="0" n="0"></line>
        <line t="C" i="171" b="0" n="0">! Implementation --------------------------------------------------------------</line>
        <line t="C" i="172" b="0" n="0"></line>
        <line t="X" i="173" b="0" n="0">contains</line>
        <line t="X" i="174" b="0" n="0"></line>
        <line t="C" i="175" b="0" n="0">! Default constructor</line>
        <line t="C" i="176" b="0" n="0">! RFC 4122: 4.4 Algorithms for Creating a UUID from Truly Random or Pseudo-Random Numbers</line>
        <line t="C" i="177" b="0" n="0">! Random number generation must be controlled from the calling function</line>
        <line k="uuid_default" t="F" i="178" b="1" n="1">elemental impure function uuid_default(  ) result(res)</line>
        <line t="F" i="179" b="1" n="1"></line>
        <line t="C" i="180" b="1" n="1">! Returned object</line>
        <line t="X" i="181" b="1" n="1">  type(t_uuid) :: res</line>
        <line t="X" i="182" b="1" n="1"></line>
        <line t="C" i="183" b="1" n="1">! Local variables</line>
        <line t="X" i="184" b="1" n="1">  real, dimension(6) :: rand</line>
        <line t="X" i="185" b="1" n="1"></line>
        <line t="C" i="186" b="1" n="1">! Generate a random node</line>
        <line t="C" i="187" b="1" n="1">! RFC 4122: 4.1.6 Node</line>
        <line t="X" i="188" b="1" n="1">  call random_number( rand )</line>
        <line t="X" i="189" b="1" n="1">  res%node = int( 256 * rand, kind=1 )</line>
        <line t="X" i="190" b="1" n="1"></line>
        <line t="C" i="191" b="1" n="1">! Generate the time stamp from the current date-time</line>
        <line t="C" i="192" b="1" n="1">! RFC 4122: 4.1.4 Timestamp</line>
        <line t="X" i="193" b="1" n="1">  call res%set_timestamp( iso8601_date_time_now() )</line>
        <line t="X" i="194" b="1" n="1"></line>
        <line t="C" i="195" b="1" n="1">! Generate the node from the mac</line>
        <line t="C" i="196" b="1" n="1">! RFC 4122: 4.1.5 Clock Sequence</line>
        <line t="X" i="197" b="1" n="1">  call res%set_random_clock()</line>
        <line t="X" i="198" b="1" n="1"></line>
        <line t="C" i="199" b="1" n="1">! Set the variant</line>
        <line t="C" i="200" b="1" n="1">! RFC 4122: 4.1.1 Variant</line>
        <line t="X" i="201" b="1" n="1">  call res%set_variant( uuid_variant_rfc4122 )</line>
        <line t="X" i="202" b="1" n="1"></line>
        <line t="C" i="203" b="1" n="1">! This is a version 4 UUID</line>
        <line t="C" i="204" b="1" n="1">! RFC 4122: 4.1.3 Version</line>
        <line t="X" i="205" b="1" n="1">  call res%set_version(4_1)</line>
        <line t="X" i="206" b="1" n="1"></line>
        <line t="EF" i="207" b="1" n="1">end function uuid_default</line>
        <line t="EF" i="208" b="1" n="1"></line>
        <line t="EF" i="209" b="1" n="1"></line>
        <line t="C" i="210" b="1" n="1">! Constructor from time and MAC</line>
        <line t="C" i="211" b="1" n="1">! RFC 4122: 4.2 Algorithms for Creating a Time-Based UUID</line>
        <line t="C" i="212" b="1" n="1">! Random number generation must be controlled from the calling function</line>
        <line k="uuid_time_and_mac" t="F" i="213" b="1" n="1">elemental impure function uuid_time_and_mac( time, mac ) result(res)</line>
        <line t="F" i="214" b="1" n="1"></line>
        <line t="C" i="215" b="1" n="1">! Time in ISO8601 structure</line>
        <line t="X" i="216" b="1" n="1">  type(t_iso8601_date_time), intent(in) :: time</line>
        <line t="X" i="217" b="1" n="1"></line>
        <line t="C" i="218" b="1" n="1">! MAC address</line>
        <line t="X" i="219" b="1" n="1">  character(len=*), intent(in) :: mac</line>
        <line t="X" i="220" b="1" n="1"></line>
        <line t="C" i="221" b="1" n="1">! Returned object</line>
        <line t="X" i="222" b="1" n="1">  type(t_uuid) :: res</line>
        <line t="X" i="223" b="1" n="1"></line>
        <line t="C" i="224" b="1" n="1">! Generate the node</line>
        <line t="C" i="225" b="1" n="1">! RFC 4122: 4.1.6 Node</line>
        <line t="C" i="226" b="1" n="1">! RFC 4122: 4.2.2 Generation details</line>
        <line t="X" i="227" b="1" n="1">  call res%set_node_from_mac( mac )</line>
        <line t="X" i="228" b="1" n="1"></line>
        <line t="C" i="229" b="1" n="1">! Generate the time stamp</line>
        <line t="C" i="230" b="1" n="1">! RFC 4122: 4.1.4 Timestamp</line>
        <line t="C" i="231" b="1" n="1">! RFC 4122: 4.2.2 Generation details</line>
        <line t="X" i="232" b="1" n="1">  call res%set_timestamp( time )</line>
        <line t="X" i="233" b="1" n="1"></line>
        <line t="C" i="234" b="1" n="1">! Generate the node from the mac</line>
        <line t="C" i="235" b="1" n="1">! RFC 4122: 4.1.5 Clock Sequence</line>
        <line t="C" i="236" b="1" n="1">! RFC 4122: 4.2.2 Generation details</line>
        <line t="X" i="237" b="1" n="1">  call res%set_random_clock()</line>
        <line t="X" i="238" b="1" n="1"></line>
        <line t="C" i="239" b="1" n="1">! Set the variant</line>
        <line t="C" i="240" b="1" n="1">! RFC 4122: 4.1.1 Variant</line>
        <line t="C" i="241" b="1" n="1">! RFC 4122: 4.2.2 Generation details</line>
        <line t="X" i="242" b="1" n="1">  call res%set_variant( uuid_variant_rfc4122 )</line>
        <line t="X" i="243" b="1" n="1"></line>
        <line t="C" i="244" b="1" n="1">! This is a version 1 UUID</line>
        <line t="C" i="245" b="1" n="1">! RFC 4122: 4.1.3 Version</line>
        <line t="C" i="246" b="1" n="1">! RFC 4122: 4.2.2 Generation details</line>
        <line t="X" i="247" b="1" n="1">  call res%set_version(1_1)</line>
        <line t="X" i="248" b="1" n="1"></line>
        <line t="EF" i="249" b="1" n="1">end function uuid_time_and_mac</line>
        <line t="EF" i="250" b="1" n="1"></line>
        <line t="EF" i="251" b="1" n="1"></line>
        <line t="C" i="252" b="1" n="1">! Constructor from name and namespace</line>
        <line t="C" i="253" b="1" n="1">! RFC 4122: 4.3 Algorithm for Creating a Name-Based UUID</line>
        <line k="uuid_namespace_and_name" t="F" i="254" b="1" n="1">elemental impure function uuid_namespace_and_name( namespace, name, version ) result(res)</line>
        <line t="F" i="255" b="1" n="1"></line>
        <line t="C" i="256" b="1" n="1">! Namespace</line>
        <line t="X" i="257" b="1" n="1">  type(t_uuid), intent(in) :: namespace</line>
        <line t="X" i="258" b="1" n="1"></line>
        <line t="C" i="259" b="1" n="1">! Name</line>
        <line t="X" i="260" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="261" b="1" n="1"></line>
        <line t="C" i="262" b="1" n="1">! UUID version (only 3 and 5 for this constructor)</line>
        <line t="X" i="263" b="1" n="1">  integer, optional, intent(in) :: version</line>
        <line t="X" i="264" b="1" n="1"></line>
        <line t="C" i="265" b="1" n="1">! Returned object</line>
        <line t="X" i="266" b="1" n="1">  type(t_uuid) :: res</line>
        <line t="X" i="267" b="1" n="1"></line>
        <line t="C" i="268" b="1" n="1">! Local variables</line>
        <line t="X" i="269" b="1" n="1">  integer(kind=1), dimension(16) :: code</line>
        <line t="X" i="270" b="1" n="1">  integer(kind=1), dimension(:), allocatable :: nsbytes, nbytes, bytes</line>
        <line t="X" i="271" b="1" n="1"></line>
        <line t="C" i="272" b="1" n="1">! Get the namesapce UUID</line>
        <line t="X" i="273" b="1" n="1">  allocate( nsbytes(16), source=namespace%to_bytes() )</line>
        <line t="X" i="274" b="1" n="1"></line>
        <line t="C" i="275" b="1" n="1">! Generate the byte sequence for the name</line>
        <line t="X" i="276" b="1" n="1">  allocate( nbytes(len(name)), source=character_to_bytes(name) )</line>
        <line t="X" i="277" b="1" n="1"></line>
        <line t="C" i="278" b="1" n="1">! Concatenate name and namespace</line>
        <line t="X" i="279" b="1" n="1">  allocate( bytes(size(nsbytes)+size(nbytes)) )</line>
        <line t="X" i="280" b="1" n="1">  bytes(:size(nsbytes)) = nsbytes</line>
        <line t="X" i="281" b="1" n="1">  bytes(size(nsbytes)+1:) = nbytes</line>
        <line t="X" i="282" b="1" n="1"></line>
        <line t="C" i="283" b="1" n="1">! Encode the bytes</line>
        <line t="X" i="284" b="1" n="1">  code = uuid_encode_bytes( bytes, version )</line>
        <line t="X" i="285" b="1" n="1"></line>
        <line t="C" i="286" b="1" n="1">! Assign the coded full name</line>
        <line t="X" i="287" b="1" n="1">  call res%from_bytes( code )</line>
        <line t="X" i="288" b="1" n="1"></line>
        <line t="C" i="289" b="1" n="1">! Check if the UUID is nil</line>
        <line t="X" i="290" b="2" n="2">  if( res /= uuid_nil ) then</line>
        <line t="X" i="291" b="2" n="2"></line>
        <line t="C" i="292" b="2" n="2">!   Set the variant</line>
        <line t="C" i="293" b="2" n="2">!   RFC 4122: 4.1.1 Variant</line>
        <line t="X" i="294" b="2" n="2">    call res%set_variant( uuid_variant_rfc4122 )</line>
        <line t="X" i="295" b="2" n="2"></line>
        <line t="C" i="296" b="2" n="2">!   This is a version 1 UUID</line>
        <line t="C" i="297" b="2" n="2">!   RFC 4122: 4.1.3 Version</line>
        <line t="X" i="298" b="3" n="3">    if( present(version) ) then</line>
        <line t="X" i="299" b="3" n="3">      call res%set_version(int(version,1))</line>
        <line t="X" i="300" b="4" n="3">    else</line>
        <line t="X" i="301" b="4" n="3">      call res%set_version(5_1)</line>
        <line t="X" i="302" b="4" n="2">    end if</line>
        <line t="X" i="303" b="4" n="2"></line>
        <line t="X" i="304" b="4" n="1">  end if</line>
        <line t="X" i="305" b="4" n="1"></line>
        <line t="EF" i="306" b="4" n="1">end function uuid_namespace_and_name</line>
        <line t="EF" i="307" b="1" n="1"></line>
        <line t="EF" i="308" b="1" n="1"></line>
        <line t="C" i="309" b="1" n="1">! Constructor for name</line>
        <line t="C" i="310" b="1" n="1">! RFC 4122: 4.3 Algorithm for Creating a Name-Based UUID</line>
        <line k="uuid_name" t="F" i="311" b="1" n="1">elemental impure function uuid_name( name, version ) result(res)</line>
        <line t="F" i="312" b="1" n="1"></line>
        <line t="C" i="313" b="1" n="1">! Namespace</line>
        <line t="X" i="314" b="1" n="1">  character(len=*), intent(in) :: name</line>
        <line t="X" i="315" b="1" n="1"></line>
        <line t="C" i="316" b="1" n="1">! UUID version (only 3 and 5 for this constructor)</line>
        <line t="X" i="317" b="1" n="1">  integer, optional, intent(in) :: version</line>
        <line t="X" i="318" b="1" n="1"></line>
        <line t="C" i="319" b="1" n="1">! Returned object</line>
        <line t="X" i="320" b="1" n="1">  type(t_uuid) :: res</line>
        <line t="X" i="321" b="1" n="1"></line>
        <line t="C" i="322" b="1" n="1">! Local variables</line>
        <line t="X" i="323" b="1" n="1">  integer(kind=1), dimension(16) :: code</line>
        <line t="X" i="324" b="1" n="1"></line>
        <line t="C" i="325" b="1" n="1">! Code the input namespace</line>
        <line t="X" i="326" b="1" n="1">  code = uuid_encode_bytes( character_to_bytes(name), version )</line>
        <line t="X" i="327" b="1" n="1"></line>
        <line t="C" i="328" b="1" n="1">! Assign the coded full name</line>
        <line t="X" i="329" b="1" n="1">  call res%from_bytes( code )</line>
        <line t="X" i="330" b="1" n="1"></line>
        <line t="C" i="331" b="1" n="1">! Check if UUID is nil</line>
        <line t="X" i="332" b="2" n="2">  if( res /= uuid_nil ) then</line>
        <line t="X" i="333" b="2" n="2"></line>
        <line t="C" i="334" b="2" n="2">!   Set the variant</line>
        <line t="C" i="335" b="2" n="2">!   RFC 4122: 4.1.1 Variant</line>
        <line t="X" i="336" b="2" n="2">    call res%set_variant( uuid_variant_rfc4122 )</line>
        <line t="X" i="337" b="2" n="2"></line>
        <line t="C" i="338" b="2" n="2">!   This is a version 1 UUID</line>
        <line t="C" i="339" b="2" n="2">!   RFC 4122: 4.1.3 Version</line>
        <line t="X" i="340" b="3" n="3">    if( present(version) ) then</line>
        <line t="X" i="341" b="3" n="3">      call res%set_version(int(version,1))</line>
        <line t="X" i="342" b="4" n="3">    else</line>
        <line t="X" i="343" b="4" n="3">      call res%set_version(5_1)</line>
        <line t="X" i="344" b="4" n="2">    end if</line>
        <line t="X" i="345" b="4" n="2"></line>
        <line t="X" i="346" b="4" n="1">  end if</line>
        <line t="X" i="347" b="4" n="1"></line>
        <line t="EF" i="348" b="4" n="1">end function uuid_name</line>
        <line t="EF" i="349" b="1" n="1"></line>
        <line t="EF" i="350" b="1" n="1"></line>
        <line t="C" i="351" b="1" n="1">! Encode a byte array</line>
        <line k="uuid_encode_bytes" t="F" i="352" b="1" n="1">pure function uuid_encode_bytes( bytes, version ) result(res)</line>
        <line t="F" i="353" b="1" n="1"></line>
        <line t="C" i="354" b="1" n="1">! Array of bytes</line>
        <line t="X" i="355" b="1" n="1">  integer(kind=1), dimension(:), intent(in) :: bytes</line>
        <line t="X" i="356" b="1" n="1"></line>
        <line t="C" i="357" b="1" n="1">! Version</line>
        <line t="X" i="358" b="1" n="1">  integer, optional, intent(in) :: version</line>
        <line t="X" i="359" b="1" n="1"></line>
        <line t="C" i="360" b="1" n="1">! Encoded byte array</line>
        <line t="X" i="361" b="1" n="1">  integer(kind=1), dimension(16) :: res</line>
        <line t="X" i="362" b="1" n="1"></line>
        <line t="C" i="363" b="1" n="1">! Local variables</line>
        <line t="X" i="364" b="1" n="1">  type(t_sha1) :: esha1</line>
        <line t="X" i="365" b="1" n="1">  type(t_md5) :: emd5</line>
        <line t="X" i="366" b="1" n="1">  integer(kind=1) :: ver</line>
        <line t="X" i="367" b="1" n="1"></line>
        <line t="C" i="368" b="1" n="1">! Determine the version</line>
        <line t="C" i="369" b="1" n="1">! By default, prefer SHA-1 using version 5</line>
        <line t="X" i="370" b="2" n="2">  if( present(version) ) then</line>
        <line t="X" i="371" b="2" n="2">    ver = int( version, kind=1 )</line>
        <line t="X" i="372" b="3" n="2">  else</line>
        <line t="X" i="373" b="3" n="2">    ver = 5_1</line>
        <line t="X" i="374" b="3" n="1">  end if</line>
        <line t="X" i="375" b="3" n="1"></line>
        <line t="C" i="376" b="3" n="1">! Select the version</line>
        <line t="X" i="377" b="3" n="2">  select case(ver)</line>
        <line t="X" i="378" b="3" n="2"></line>
        <line t="C" i="379" b="3" n="2">!   Encode with MD5 (version 3)</line>
        <line t="X" i="380" b="4" n="2">    case(3)</line>
        <line t="X" i="381" b="4" n="2">      emd5 = md5()</line>
        <line t="X" i="382" b="4" n="2">      call emd5%encode(bytes)</line>
        <line t="X" i="383" b="4" n="2">      res = emd5%get_hash()</line>
        <line t="X" i="384" b="4" n="2"></line>
        <line t="C" i="385" b="4" n="2">!   Encode with SHA-1 (version 5 or default)</line>
        <line t="X" i="386" b="5" n="2">    case(5)</line>
        <line t="X" i="387" b="5" n="2">      esha1 = sha1()</line>
        <line t="X" i="388" b="5" n="2">      res = esha1%encode(bytes)</line>
        <line t="X" i="389" b="5" n="2"></line>
        <line t="C" i="390" b="5" n="2">!   Invalid version</line>
        <line t="X" i="391" b="6" n="2">    case default</line>
        <line t="X" i="392" b="6" n="2">      res = 0_1</line>
        <line t="X" i="393" b="6" n="2"></line>
        <line t="X" i="394" b="6" n="1">  end select</line>
        <line t="X" i="395" b="6" n="1"></line>
        <line t="EF" i="396" b="6" n="1">end function uuid_encode_bytes</line>
        <line t="EF" i="397" b="1" n="1"></line>
        <line t="EF" i="398" b="1" n="1"></line>
        <line t="C" i="399" b="1" n="1">! Comparison operator (==)</line>
        <line k="uuid_equal_to" t="F" i="400" b="1" n="1">elemental function uuid_equal_to( this, right ) result(res)</line>
        <line t="F" i="401" b="1" n="1"></line>
        <line t="C" i="402" b="1" n="1">! Calling object</line>
        <line t="X" i="403" b="1" n="1">  class(t_uuid), intent(in) :: this</line>
        <line t="X" i="404" b="1" n="1"></line>
        <line t="C" i="405" b="1" n="1">! Right operand</line>
        <line t="X" i="406" b="1" n="1">  type(t_uuid), intent(in) :: right</line>
        <line t="X" i="407" b="1" n="1"></line>
        <line t="C" i="408" b="1" n="1">! Comparison result</line>
        <line t="X" i="409" b="1" n="1">  logical :: res</line>
        <line t="X" i="410" b="1" n="1"></line>
        <line t="C" i="411" b="1" n="1">! Compare UUIDs</line>
        <line t="X" i="412" b="1" n="1">  res = .not. ( this /= right )</line>
        <line t="X" i="413" b="1" n="1"></line>
        <line t="EF" i="414" b="1" n="1">end function uuid_equal_to</line>
        <line t="EF" i="415" b="1" n="1"></line>
        <line t="EF" i="416" b="1" n="1"></line>
        <line t="C" i="417" b="1" n="1">! Comparison operator [=)</line>
        <line k="uuid_not_equal_to" t="F" i="418" b="1" n="1">elemental function uuid_not_equal_to( this, right ) result(res)</line>
        <line t="F" i="419" b="1" n="1"></line>
        <line t="C" i="420" b="1" n="1">! Calling object</line>
        <line t="X" i="421" b="1" n="1">  class(t_uuid), intent(in) :: this</line>
        <line t="X" i="422" b="1" n="1"></line>
        <line t="C" i="423" b="1" n="1">! Right operand</line>
        <line t="X" i="424" b="1" n="1">  type(t_uuid), intent(in) :: right</line>
        <line t="X" i="425" b="1" n="1"></line>
        <line t="C" i="426" b="1" n="1">! Comparison result</line>
        <line t="X" i="427" b="1" n="1">  logical :: res</line>
        <line t="X" i="428" b="1" n="1"></line>
        <line t="C" i="429" b="1" n="1">! Compare UUIDs</line>
        <line t="X" i="430" b="1" n="1">  res = ( this%time_low /= right%time_low ) .or. &amp;</line>
        <line t="X" i="431" b="1" n="1">        ( this%time_mid /= right%time_mid ) .or. &amp;</line>
        <line t="X" i="432" b="1" n="1">        ( this%time_hi_and_version /= right%time_hi_and_version ) .or. &amp;</line>
        <line t="X" i="433" b="1" n="1">        ( this%clock_seq_hi_low /= right%clock_seq_hi_low ) .or. &amp;</line>
        <line t="X" i="434" b="1" n="1">        any( this%node /= right%node )</line>
        <line t="X" i="435" b="1" n="1"></line>
        <line t="EF" i="436" b="1" n="1">end function uuid_not_equal_to</line>
        <line t="EF" i="437" b="1" n="1"></line>
        <line t="EF" i="438" b="1" n="1"></line>
        <line t="C" i="439" b="1" n="1">! Generate the node from the mac</line>
        <line t="C" i="440" b="1" n="1">! RFC 4122: 4.1.6 Node</line>
        <line t="C" i="441" b="1" n="1">! RFC 4122: 4.2.2 Generation details</line>
        <line k="uuid_set_node_from_mac" t="S" i="442" b="1" n="1">pure subroutine uuid_set_node_from_mac( this, mac )</line>
        <line t="S" i="443" b="1" n="1"></line>
        <line t="C" i="444" b="1" n="1">! Calling object</line>
        <line t="X" i="445" b="1" n="1">  class(t_uuid), intent(inout) :: this</line>
        <line t="X" i="446" b="1" n="1"></line>
        <line t="C" i="447" b="1" n="1">! MAC address</line>
        <line t="X" i="448" b="1" n="1">  character(len=*), intent(in) :: mac</line>
        <line t="X" i="449" b="1" n="1"></line>
        <line t="C" i="450" b="1" n="1">! Local variables</line>
        <line t="X" i="451" b="1" n="1">  integer :: i</line>
        <line t="X" i="452" b="1" n="1">  character(len=:), allocatable :: cmac</line>
        <line t="X" i="453" b="1" n="1"></line>
        <line t="C" i="454" b="1" n="1">! Compress the MAC</line>
        <line t="X" i="455" b="1" n="1">  cmac = mac</line>
        <line t="X" i="456" b="1" n="1">  i = scan( cmac, ':-.' )</line>
        <line t="X" i="457" b="2" n="2">  do while( i &gt; 0 )</line>
        <line t="X" i="458" b="2" n="2">    cmac(i:) = cmac(i+1:)</line>
        <line t="X" i="459" b="2" n="2">    i = scan( cmac, ':-.' )</line>
        <line t="X" i="460" b="2" n="1">  end do</line>
        <line t="X" i="461" b="2" n="1"></line>
        <line t="C" i="462" b="2" n="1">! Set the node</line>
        <line t="X" i="463" b="2" n="1">  this%node = hex_to_bytes( trim(cmac) )</line>
        <line t="X" i="464" b="2" n="1"></line>
        <line t="ES" i="465" b="2" n="1">end subroutine uuid_set_node_from_mac</line>
        <line t="ES" i="466" b="1" n="1"></line>
        <line t="ES" i="467" b="1" n="1"></line>
        <line t="C" i="468" b="1" n="1">! Generate the node from the mac</line>
        <line t="C" i="469" b="1" n="1">! RFC 4122: 4.1.4 Timestamp</line>
        <line t="C" i="470" b="1" n="1">! RFC 4122: 4.2.2 Generation details</line>
        <line k="uuid_set_timestamp" t="S" i="471" b="1" n="1">pure subroutine uuid_set_timestamp( this, time )</line>
        <line t="S" i="472" b="1" n="1"></line>
        <line t="C" i="473" b="1" n="1">! Calling object</line>
        <line t="X" i="474" b="1" n="1">  class(t_uuid), intent(inout) :: this</line>
        <line t="X" i="475" b="1" n="1"></line>
        <line t="C" i="476" b="1" n="1">! Time as ISO8601 structure</line>
        <line t="X" i="477" b="1" n="1">  type(t_iso8601_date_time), intent(in) :: time</line>
        <line t="X" i="478" b="1" n="1"></line>
        <line t="C" i="479" b="1" n="1">! Day of the year at the beginning of each month</line>
        <line t="X" i="480" b="1" n="1">  integer, parameter, dimension(12) :: doy = [ &amp;</line>
        <line t="X" i="481" b="1" n="1">      0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334 ]</line>
        <line t="X" i="482" b="1" n="1"></line>
        <line t="C" i="483" b="1" n="1">! Local variables</line>
        <line t="X" i="484" b="1" n="1">  integer, parameter :: y0 = 1582</line>
        <line t="X" i="485" b="1" n="1">  integer, parameter :: m0 = 10</line>
        <line t="X" i="486" b="1" n="1">  integer, parameter :: d0 = 10</line>
        <line t="X" i="487" b="1" n="1">  integer :: y, m, d, h, mi, s, mis, mus, ns</line>
        <line t="X" i="488" b="1" n="1">  integer :: nleapy, ndays</line>
        <line t="X" i="489" b="1" n="1">  integer(kind=8) :: day100ns, t64</line>
        <line t="X" i="490" b="1" n="1"></line>
        <line t="C" i="491" b="1" n="1">! Initialise locals</line>
        <line t="X" i="492" b="1" n="1">  y = time%get_year()</line>
        <line t="X" i="493" b="1" n="1">  m = time%get_month()</line>
        <line t="X" i="494" b="1" n="1">  d = time%get_day()</line>
        <line t="X" i="495" b="1" n="1"></line>
        <line t="C" i="496" b="1" n="1">! Compute the base number of leap days (asume year is after 1900)</line>
        <line t="X" i="497" b="1" n="1">  nleapy = ( y - y0 ) / 4</line>
        <line t="X" i="498" b="1" n="1"></line>
        <line t="C" i="499" b="1" n="1">! Remove the days for century non-leap years (1700, 1800 and 1900)</line>
        <line t="X" i="500" b="1" n="2">  select case(y)</line>
        <line t="X" i="501" b="2" n="2">    case(:1699)</line>
        <line t="X" i="502" b="3" n="2">    case(1700:1799)</line>
        <line t="X" i="503" b="3" n="2">      nleapy = nleapy - 1</line>
        <line t="X" i="504" b="4" n="2">    case(1800:1899)</line>
        <line t="X" i="505" b="4" n="2">      nleapy = nleapy - 2</line>
        <line t="X" i="506" b="5" n="2">    case(1900:2099)</line>
        <line t="X" i="507" b="5" n="2">      nleapy = nleapy - 3</line>
        <line t="X" i="508" b="6" n="2">    case(2100:)</line>
        <line t="X" i="509" b="6" n="2">      nleapy = nleapy - 4</line>
        <line t="X" i="510" b="6" n="1">  end select</line>
        <line t="X" i="511" b="6" n="1"></line>
        <line t="C" i="512" b="6" n="1">! Add a leap day if in a leap year after February 28</line>
        <line t="X" i="513" b="7" n="2">  if( mod( y, 4 ) == 0 .and. d &gt;= (31 + 28) ) then</line>
        <line t="X" i="514" b="7" n="2">    nleapy = nleapy + 1</line>
        <line t="X" i="515" b="7" n="1">  end if</line>
        <line t="X" i="516" b="7" n="1"></line>
        <line t="C" i="517" b="7" n="1">! Compute the number of days from the reference epoch 1582-10-15</line>
        <line t="X" i="518" b="7" n="1">  ndays = ( y - y0 - 1 ) * 365 + ( 16 + 30 + 31 ) + doy(m) + d + nleapy</line>
        <line t="X" i="519" b="7" n="1"></line>
        <line t="C" i="520" b="7" n="1">! Compute the timestamp (100-ns steps)</line>
        <line t="X" i="521" b="7" n="1">  t64 = int(ndays,8) * 24_8 * 60_8 * 60_8 * 10000000_8</line>
        <line t="X" i="522" b="7" n="1">  h = time%get_hour()</line>
        <line t="X" i="523" b="7" n="1">  mi = time%get_minute()</line>
        <line t="X" i="524" b="7" n="1">  s = time%get_second()</line>
        <line t="X" i="525" b="7" n="1">  mis = time%get_millisecond()</line>
        <line t="X" i="526" b="7" n="1">  mus = time%get_microsecond()</line>
        <line t="X" i="527" b="7" n="1">  ns = time%get_nanosecond()</line>
        <line t="X" i="528" b="7" n="1">  day100ns = int(h,8)</line>
        <line t="X" i="529" b="7" n="1">  day100ns = day100ns * 60_8 + int(mi,8)</line>
        <line t="X" i="530" b="7" n="1">  day100ns = day100ns * 60_8 + int(s,8)</line>
        <line t="X" i="531" b="7" n="1">  day100ns = day100ns * 1000_8 + int(mis,8)</line>
        <line t="X" i="532" b="7" n="1">  day100ns = day100ns * 1000_8 + int(mus,8)</line>
        <line t="X" i="533" b="7" n="1">  day100ns = day100ns * 1000_8 + int(ns,8)</line>
        <line t="X" i="534" b="7" n="1">  t64 = t64 + day100ns / 100_8</line>
        <line t="X" i="535" b="7" n="1"></line>
        <line t="C" i="536" b="7" n="1">! Set the UUID fields</line>
        <line t="X" i="537" b="7" n="1">  this%time_low = int( ibits( t64, 0, 32 ), kind=4 )</line>
        <line t="X" i="538" b="7" n="1">  this%time_mid = int( ibits( t64, 32, 16 ), kind=2 )</line>
        <line t="X" i="539" b="7" n="1">  this%time_hi_and_version = int( ibits( t64, 48, 12 ), kind=2 )</line>
        <line t="X" i="540" b="7" n="1"></line>
        <line t="ES" i="541" b="7" n="1">end subroutine uuid_set_timestamp</line>
        <line t="ES" i="542" b="1" n="1"></line>
        <line t="ES" i="543" b="1" n="1"></line>
        <line t="C" i="544" b="1" n="1">! Generate the node from the mac</line>
        <line t="C" i="545" b="1" n="1">! RFC 4122: 4.1.5 Clock Sequence</line>
        <line t="C" i="546" b="1" n="1">! RFC 4122: 4.2.2 Generation details</line>
        <line k="uuid_set_random_clock" t="S" i="547" b="1" n="1">subroutine uuid_set_random_clock( this )</line>
        <line t="S" i="548" b="1" n="1"></line>
        <line t="C" i="549" b="1" n="1">! Calling object</line>
        <line t="X" i="550" b="1" n="1">  class(t_uuid), intent(inout) :: this</line>
        <line t="X" i="551" b="1" n="1"></line>
        <line t="C" i="552" b="1" n="1">! Local varialbles</line>
        <line t="X" i="553" b="1" n="1">  real(kind=4) :: clock</line>
        <line t="X" i="554" b="1" n="1">  integer(kind=4) :: iclock</line>
        <line t="X" i="555" b="1" n="1"></line>
        <line t="C" i="556" b="1" n="1">! Generate the random clock</line>
        <line t="X" i="557" b="1" n="1">  call random_number(clock)</line>
        <line t="X" i="558" b="1" n="1"></line>
        <line t="C" i="559" b="1" n="1">! Retain the 14 least significant bits</line>
        <line t="X" i="560" b="1" n="1">  iclock = int( clock * 2**16 )</line>
        <line t="X" i="561" b="1" n="1">  iclock = ibclr( iclock, 15 )</line>
        <line t="X" i="562" b="1" n="1">  iclock = ibclr( iclock, 14 )</line>
        <line t="X" i="563" b="1" n="1">  this%clock_seq_hi_low = int( iclock, kind=2 )</line>
        <line t="X" i="564" b="1" n="1"></line>
        <line t="ES" i="565" b="1" n="1">end subroutine uuid_set_random_clock</line>
        <line t="ES" i="566" b="1" n="1"></line>
        <line t="ES" i="567" b="1" n="1"></line>
        <line t="C" i="568" b="1" n="1">! Set the version</line>
        <line t="C" i="569" b="1" n="1">! RFC 4122: 4.1.3 Version</line>
        <line t="C" i="570" b="1" n="1">! RFC 4122: 4.2.2 Generation details</line>
        <line k="uuid_set_version" t="S" i="571" b="1" n="1">pure subroutine uuid_set_version( this, version )</line>
        <line t="S" i="572" b="1" n="1"></line>
        <line t="C" i="573" b="1" n="1">! Calling object</line>
        <line t="X" i="574" b="1" n="1">  class(t_uuid), intent(inout) :: this</line>
        <line t="X" i="575" b="1" n="1"></line>
        <line t="C" i="576" b="1" n="1">! Version number</line>
        <line t="X" i="577" b="1" n="1">  integer(kind=1), intent(in) :: version</line>
        <line t="X" i="578" b="1" n="1"></line>
        <line t="C" i="579" b="1" n="1">! Set the version</line>
        <line t="C" i="580" b="1" n="1">! Replace the 4 most significant bits in time_hi_and_version by version</line>
        <line t="X" i="581" b="1" n="1">  this%time_hi_and_version = ior( iand( this%time_hi_and_version, uuid_version_mask_set ), &amp;</line>
        <line t="X" i="582" b="1" n="1">                                  ishft(int(version,2),12) )</line>
        <line t="X" i="583" b="1" n="1"></line>
        <line t="ES" i="584" b="1" n="1">end subroutine uuid_set_version</line>
        <line t="ES" i="585" b="1" n="1"></line>
        <line t="ES" i="586" b="1" n="1"></line>
        <line t="C" i="587" b="1" n="1">! Set the variant</line>
        <line t="C" i="588" b="1" n="1">! RFC 4122: 4.1.1 Variant</line>
        <line t="C" i="589" b="1" n="1">! RFC 4122: 4.2.2 Generation details</line>
        <line k="uuid_set_variant" t="S" i="590" b="1" n="1">pure subroutine uuid_set_variant( this, variant )</line>
        <line t="S" i="591" b="1" n="1"></line>
        <line t="C" i="592" b="1" n="1">! Calling object</line>
        <line t="X" i="593" b="1" n="1">  class(t_uuid), intent(inout) :: this</line>
        <line t="X" i="594" b="1" n="1"></line>
        <line t="C" i="595" b="1" n="1">! Variant number</line>
        <line t="X" i="596" b="1" n="1">  integer(kind=1), intent(in) :: variant</line>
        <line t="X" i="597" b="1" n="1"></line>
        <line t="C" i="598" b="1" n="1">! Set the variant</line>
        <line t="C" i="599" b="1" n="1">! Replace the 3 most significant bits in time_hi_and_version by version</line>
        <line t="X" i="600" b="1" n="1">  this%clock_seq_hi_low = ior( iand( this%clock_seq_hi_low, uuid_variant_mask_set ), &amp;</line>
        <line t="X" i="601" b="1" n="1">                               ishft(int(variant,2),12) )</line>
        <line t="X" i="602" b="1" n="1"></line>
        <line t="ES" i="603" b="1" n="1">end subroutine uuid_set_variant</line>
        <line t="ES" i="604" b="1" n="1"></line>
        <line t="ES" i="605" b="1" n="1"></line>
        <line t="C" i="606" b="1" n="1">! Generate the UUID string</line>
        <line k="uuid_to_string" t="F" i="607" b="1" n="1">elemental function uuid_to_string( this, separator, curly_brackets, capitalise ) result(res)</line>
        <line t="F" i="608" b="1" n="1"></line>
        <line t="C" i="609" b="1" n="1">! Calling object</line>
        <line t="X" i="610" b="1" n="1">  class(t_uuid), intent(in) :: this</line>
        <line t="X" i="611" b="1" n="1"></line>
        <line t="C" i="612" b="1" n="1">! Select the field separator (defaults to -)</line>
        <line t="X" i="613" b="1" n="1">  character, optional, intent(in) :: separator</line>
        <line t="X" i="614" b="1" n="1"></line>
        <line t="C" i="615" b="1" n="1">! Put curly brackets around the UUID (defaults to false)</line>
        <line t="X" i="616" b="1" n="1">  logical, optional, intent(in) :: curly_brackets</line>
        <line t="X" i="617" b="1" n="1"></line>
        <line t="C" i="618" b="1" n="1">! Generate the UUID in uppercase (default to false, i.e. lowercase)</line>
        <line t="X" i="619" b="1" n="1">  logical, optional, intent(in) :: capitalise</line>
        <line t="X" i="620" b="1" n="1"></line>
        <line t="C" i="621" b="1" n="1">! UUID formatted string</line>
        <line t="X" i="622" b="1" n="1">  character(len=38) :: res</line>
        <line t="X" i="623" b="1" n="1"></line>
        <line t="C" i="624" b="1" n="1">! Local variables</line>
        <line t="X" i="625" b="1" n="1">  character :: sep</line>
        <line t="X" i="626" b="1" n="1">  character :: lbracket, rbracket</line>
        <line t="X" i="627" b="1" n="1">  character(len=*), parameter :: fmt = "(a,z8.8,3(a,z4.4),a,6z2.2,a)"</line>
        <line t="X" i="628" b="1" n="1"></line>
        <line t="C" i="629" b="1" n="1">! Select the separator</line>
        <line t="X" i="630" b="2" n="2">  if( present(separator) ) then</line>
        <line t="X" i="631" b="2" n="2">    sep = separator</line>
        <line t="X" i="632" b="3" n="2">  else</line>
        <line t="X" i="633" b="3" n="2">    sep = uuid_default_separator</line>
        <line t="X" i="634" b="3" n="1">  end if</line>
        <line t="X" i="635" b="3" n="1"></line>
        <line t="C" i="636" b="3" n="1">! Select the surrounding curly brackets</line>
        <line t="X" i="637" b="4" n="2">  if( present(curly_brackets) ) then</line>
        <line t="X" i="638" b="4" n="2">    lbracket = uuid_lbracket</line>
        <line t="X" i="639" b="4" n="2">    rbracket = uuid_rbracket</line>
        <line t="X" i="640" b="5" n="2">  else</line>
        <line t="X" i="641" b="5" n="2">    lbracket = ''</line>
        <line t="X" i="642" b="5" n="2">    rbracket = ''</line>
        <line t="X" i="643" b="5" n="1">  end if</line>
        <line t="X" i="644" b="5" n="1"></line>
        <line t="C" i="645" b="5" n="1">! Generate the string</line>
        <line t="X" i="646" b="5" n="1">  write( res, fmt ) lbracket, &amp;</line>
        <line t="X" i="647" b="5" n="1">                    this%time_low, sep, &amp;</line>
        <line t="X" i="648" b="5" n="1">                    this%time_mid, sep, &amp;</line>
        <line t="X" i="649" b="5" n="1">                    this%time_hi_and_version, sep, &amp;</line>
        <line t="X" i="650" b="5" n="1">                    this%clock_seq_hi_low, sep, &amp;</line>
        <line t="X" i="651" b="5" n="1">                    this%node, &amp;</line>
        <line t="X" i="652" b="5" n="1">                    rbracket</line>
        <line t="X" i="653" b="5" n="1"></line>
        <line t="C" i="654" b="5" n="1">! Generate with the selected case</line>
        <line t="X" i="655" b="5" n="1">  res = lowercase(trim(adjustl(res)))</line>
        <line t="X" i="656" b="6" n="2">  if( present(capitalise) ) then</line>
        <line t="X" i="657" b="7" n="3">    if( capitalise ) then</line>
        <line t="X" i="658" b="7" n="3">      res = uppercase(res)</line>
        <line t="X" i="659" b="7" n="2">    end if</line>
        <line t="X" i="660" b="7" n="1">  end if</line>
        <line t="X" i="661" b="7" n="1"></line>
        <line t="EF" i="662" b="7" n="1">end function uuid_to_string</line>
        <line t="EF" i="663" b="1" n="1"></line>
        <line t="EF" i="664" b="1" n="1"></line>
        <line t="C" i="665" b="1" n="1">! Generate the UUID array of bytes</line>
        <line k="uuid_to_bytes" t="F" i="666" b="1" n="1">pure function uuid_to_bytes( this ) result(res)</line>
        <line t="F" i="667" b="1" n="1"></line>
        <line t="C" i="668" b="1" n="1">! Calling object</line>
        <line t="X" i="669" b="1" n="1">  class(t_uuid), intent(in) :: this</line>
        <line t="X" i="670" b="1" n="1"></line>
        <line t="C" i="671" b="1" n="1">! UUID byte array</line>
        <line t="X" i="672" b="1" n="1">  integer(kind=1), dimension(16) :: res</line>
        <line t="X" i="673" b="1" n="1"></line>
        <line t="C" i="674" b="1" n="1">! Generate the array of bytes</line>
        <line t="X" i="675" b="1" n="1">  res(4:1:-1) = transfer( this%time_low, res(1:4) )</line>
        <line t="X" i="676" b="1" n="1">  res(6:5:-1) = transfer( this%time_mid, res(5:6) )</line>
        <line t="X" i="677" b="1" n="1">  res(8:7:-1) = transfer( this%time_hi_and_version, res(7:8) )</line>
        <line t="X" i="678" b="1" n="1">  res(10:9:-1) = transfer( this%clock_seq_hi_low, res(9:10) )</line>
        <line t="X" i="679" b="1" n="1">  res(11:16) = this%node</line>
        <line t="X" i="680" b="1" n="1"></line>
        <line t="EF" i="681" b="1" n="1">end function uuid_to_bytes</line>
        <line t="EF" i="682" b="1" n="1"></line>
        <line t="EF" i="683" b="1" n="1"></line>
        <line t="C" i="684" b="1" n="1">! Assign a UUID from bytes</line>
        <line k="uuid_from_bytes" t="S" i="685" b="1" n="1">pure subroutine uuid_from_bytes( this, bytes )</line>
        <line t="S" i="686" b="1" n="1"></line>
        <line t="C" i="687" b="1" n="1">! Calling object</line>
        <line t="X" i="688" b="1" n="1">  class(t_uuid), intent(inout) :: this</line>
        <line t="X" i="689" b="1" n="1"></line>
        <line t="C" i="690" b="1" n="1">! UUID byte array</line>
        <line t="X" i="691" b="1" n="1">  integer(kind=1), dimension(:), intent(in) :: bytes</line>
        <line t="X" i="692" b="1" n="1"></line>
        <line t="C" i="693" b="1" n="1">! Set time_low</line>
        <line t="X" i="694" b="1" n="1">  this%time_low = transfer( bytes(4:1:-1), this%time_low )</line>
        <line t="X" i="695" b="1" n="1"></line>
        <line t="C" i="696" b="1" n="1">! Set time_mid</line>
        <line t="X" i="697" b="1" n="1">  this%time_mid = transfer( bytes(6:5:-1), this%time_mid )</line>
        <line t="X" i="698" b="1" n="1"></line>
        <line t="C" i="699" b="1" n="1">! Set time_hi_and_version</line>
        <line t="X" i="700" b="1" n="1">  this%time_hi_and_version = transfer( bytes(8:7:-1), this%time_hi_and_version )</line>
        <line t="X" i="701" b="1" n="1"></line>
        <line t="C" i="702" b="1" n="1">! Set clock_seq_hi_low</line>
        <line t="X" i="703" b="1" n="1">  this%clock_seq_hi_low = transfer( bytes(10:9:-1), this%clock_seq_hi_low )</line>
        <line t="X" i="704" b="1" n="1"></line>
        <line t="C" i="705" b="1" n="1">! Set the node</line>
        <line t="X" i="706" b="1" n="1">  this%node = bytes(11:16)</line>
        <line t="X" i="707" b="1" n="1"></line>
        <line t="ES" i="708" b="1" n="1">end subroutine uuid_from_bytes</line>
        <line t="ES" i="709" b="1" n="1"></line>
        <line t="ES" i="710" b="1" n="1"></line>
        <line t="C" i="711" b="1" n="1">! Getter for time_low</line>
        <line k="uuid_get_time_low" t="F" i="712" b="1" n="1">elemental function uuid_get_time_low( this ) result(res)</line>
        <line t="F" i="713" b="1" n="1"></line>
        <line t="C" i="714" b="1" n="1">! Calling object</line>
        <line t="X" i="715" b="1" n="1">  class(t_uuid), intent(in) :: this</line>
        <line t="X" i="716" b="1" n="1"></line>
        <line t="C" i="717" b="1" n="1">! Getter result</line>
        <line t="X" i="718" b="1" n="1">  integer(kind=4) :: res</line>
        <line t="X" i="719" b="1" n="1"></line>
        <line t="C" i="720" b="1" n="1">! Return value</line>
        <line t="X" i="721" b="1" n="1">  res = this%time_low</line>
        <line t="X" i="722" b="1" n="1"></line>
        <line t="EF" i="723" b="1" n="1">end function uuid_get_time_low</line>
        <line t="EF" i="724" b="1" n="1"></line>
        <line t="EF" i="725" b="1" n="1"></line>
        <line t="C" i="726" b="1" n="1">! Getter for time_mid</line>
        <line k="uuid_get_time_mid" t="F" i="727" b="1" n="1">elemental function uuid_get_time_mid( this ) result(res)</line>
        <line t="F" i="728" b="1" n="1"></line>
        <line t="C" i="729" b="1" n="1">! Calling object</line>
        <line t="X" i="730" b="1" n="1">  class(t_uuid), intent(in) :: this</line>
        <line t="X" i="731" b="1" n="1"></line>
        <line t="C" i="732" b="1" n="1">! Getter result</line>
        <line t="X" i="733" b="1" n="1">  integer(kind=2) :: res</line>
        <line t="X" i="734" b="1" n="1"></line>
        <line t="C" i="735" b="1" n="1">! Return value</line>
        <line t="X" i="736" b="1" n="1">  res = this%time_mid</line>
        <line t="X" i="737" b="1" n="1"></line>
        <line t="EF" i="738" b="1" n="1">end function uuid_get_time_mid</line>
        <line t="EF" i="739" b="1" n="1"></line>
        <line t="EF" i="740" b="1" n="1"></line>
        <line t="C" i="741" b="1" n="1">! Getter for time_hi_and_version</line>
        <line k="uuid_get_time_hi_and_version" t="F" i="742" b="1" n="1">elemental function uuid_get_time_hi_and_version( this ) result(res)</line>
        <line t="F" i="743" b="1" n="1"></line>
        <line t="C" i="744" b="1" n="1">! Calling object</line>
        <line t="X" i="745" b="1" n="1">  class(t_uuid), intent(in) :: this</line>
        <line t="X" i="746" b="1" n="1"></line>
        <line t="C" i="747" b="1" n="1">! Getter result</line>
        <line t="X" i="748" b="1" n="1">  integer(kind=2) :: res</line>
        <line t="X" i="749" b="1" n="1"></line>
        <line t="C" i="750" b="1" n="1">! Return value</line>
        <line t="X" i="751" b="1" n="1">  res = this%time_hi_and_version</line>
        <line t="X" i="752" b="1" n="1"></line>
        <line t="EF" i="753" b="1" n="1">end function uuid_get_time_hi_and_version</line>
        <line t="EF" i="754" b="1" n="1"></line>
        <line t="EF" i="755" b="1" n="1"></line>
        <line t="C" i="756" b="1" n="1">! Getter for clock_seq_hi_low</line>
        <line k="uuid_get_clock_seq_hi_low" t="F" i="757" b="1" n="1">elemental function uuid_get_clock_seq_hi_low( this ) result(res)</line>
        <line t="F" i="758" b="1" n="1"></line>
        <line t="C" i="759" b="1" n="1">! Calling object</line>
        <line t="X" i="760" b="1" n="1">  class(t_uuid), intent(in) :: this</line>
        <line t="X" i="761" b="1" n="1"></line>
        <line t="C" i="762" b="1" n="1">! Getter result</line>
        <line t="X" i="763" b="1" n="1">  integer(kind=2) :: res</line>
        <line t="X" i="764" b="1" n="1"></line>
        <line t="C" i="765" b="1" n="1">! Return value</line>
        <line t="X" i="766" b="1" n="1">  res = this%clock_seq_hi_low</line>
        <line t="X" i="767" b="1" n="1"></line>
        <line t="EF" i="768" b="1" n="1">end function uuid_get_clock_seq_hi_low</line>
        <line t="EF" i="769" b="1" n="1"></line>
        <line t="EF" i="770" b="1" n="1"></line>
        <line t="C" i="771" b="1" n="1">! Getter for node</line>
        <line k="uuid_get_node" t="F" i="772" b="1" n="1">pure function uuid_get_node( this ) result(res)</line>
        <line t="F" i="773" b="1" n="1"></line>
        <line t="C" i="774" b="1" n="1">! Calling object</line>
        <line t="X" i="775" b="1" n="1">  class(t_uuid), intent(in) :: this</line>
        <line t="X" i="776" b="1" n="1"></line>
        <line t="C" i="777" b="1" n="1">! Getter result</line>
        <line t="X" i="778" b="1" n="1">  integer(kind=1), dimension(6) :: res</line>
        <line t="X" i="779" b="1" n="1"></line>
        <line t="C" i="780" b="1" n="1">! Return value</line>
        <line t="X" i="781" b="1" n="1">  res = this%node</line>
        <line t="X" i="782" b="1" n="1"></line>
        <line t="EF" i="783" b="1" n="1">end function uuid_get_node</line>
        <line t="EF" i="784" b="1" n="1"></line>
        <line t="EF" i="785" b="1" n="1"></line>
        <line t="C" i="786" b="1" n="1">! Get the version</line>
        <line k="uuid_get_version" t="F" i="787" b="1" n="1">elemental function uuid_get_version( this ) result(res)</line>
        <line t="F" i="788" b="1" n="1"></line>
        <line t="C" i="789" b="1" n="1">! Calling object</line>
        <line t="X" i="790" b="1" n="1">  class(t_uuid), intent(in) :: this</line>
        <line t="X" i="791" b="1" n="1"></line>
        <line t="C" i="792" b="1" n="1">! Getter result</line>
        <line t="X" i="793" b="1" n="1">  integer(kind=1) :: res</line>
        <line t="X" i="794" b="1" n="1"></line>
        <line t="C" i="795" b="1" n="1">! Return value</line>
        <line t="X" i="796" b="1" n="1">  res = int( ishft( iand( this%time_hi_and_version, uuid_version_mask_get ), -12 ), kind=1 )</line>
        <line t="X" i="797" b="1" n="1"></line>
        <line t="EF" i="798" b="1" n="1">end function uuid_get_version</line>
        <line t="EF" i="799" b="1" n="1"></line>
        <line t="EF" i="800" b="1" n="1"></line>
        <line t="C" i="801" b="1" n="1">! Get the variant</line>
        <line k="uuid_get_variant" t="F" i="802" b="1" n="1">elemental function uuid_get_variant( this ) result(res)</line>
        <line t="F" i="803" b="1" n="1"></line>
        <line t="C" i="804" b="1" n="1">! Calling object</line>
        <line t="X" i="805" b="1" n="1">  class(t_uuid), intent(in) :: this</line>
        <line t="X" i="806" b="1" n="1"></line>
        <line t="C" i="807" b="1" n="1">! Getter result</line>
        <line t="X" i="808" b="1" n="1">  integer(kind=1) :: res</line>
        <line t="X" i="809" b="1" n="1"></line>
        <line t="C" i="810" b="1" n="1">! Return value</line>
        <line t="X" i="811" b="1" n="1">  res = int( ishft( iand( this%clock_seq_hi_low, uuid_variant_mask_get ), -12 ), 1 )</line>
        <line t="X" i="812" b="1" n="1"></line>
        <line t="EF" i="813" b="1" n="1">end function uuid_get_variant</line>
        <line t="EF" i="814" b="1" n="1"></line>
        <line t="M" i="815" b="1" n="1">end module m_uuid</line>
        <line t="M" i="816" b="1" n="1"></line>
        <line t="M" i="817" b="1" n="1"></line>
    </code>
</fmx>