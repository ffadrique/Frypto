<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../fmx.xsl"?>
<fmx xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="m_hash64.f90">
    <context>
        <time>2025-03-09T18:24:38</time>
        <version>1.0.0.1</version>
        <path>src</path>
        <path_to_root>../</path_to_root>
        <project>Frypto</project>
        <name>m_hash64.f90</name>
        <copyright>Copyright © 2020, Fran Martinez Fadrique &lt;Fran.Martinez.Fadrique@gmail.com&gt;</copyright>
    </context>
    <units>
        <unit name="m_hash64" type="module">
            <main>
                <lines>
                    <source percent="24.73">23</source>
                    <comments percent="47.31">44</comments>
                    <empty percent="27.96">26</empty>
                    <total>93</total>
                </lines>
                <complexity>
                    <minimum>0</minimum>
                    <maximum>0</maximum>
                    <average>0.00</average>
                </complexity>
                <nesting>
                    <minimum>0</minimum>
                    <maximum>0</maximum>
                    <average>0.00</average>
                </nesting>
                <methods>0</methods>
            </main>
            <methods>
                <method name="hash64_choose" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">7</source>
                            <comments percent="28.57">6</comments>
                            <empty percent="38.10">8</empty>
                            <total>21</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="hash64_finalise" type="function">
                    <statistics>
                        <lines>
                            <source percent="40.63">13</source>
                            <comments percent="34.38">11</comments>
                            <empty percent="25.00">8</empty>
                            <total>32</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="hash64_get_hash_trailing_size" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">4</source>
                            <comments percent="25.00">3</comments>
                            <empty percent="41.67">5</empty>
                            <total>12</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="hash64_get_size_of_M" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">4</source>
                            <comments percent="25.00">3</comments>
                            <empty percent="41.67">5</empty>
                            <total>12</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="hash64_high_s0" type="function">
                    <statistics>
                        <lines>
                            <source percent="50.00">10</source>
                            <comments percent="20.00">4</comments>
                            <empty percent="30.00">6</empty>
                            <total>20</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="hash64_high_s1" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">5</source>
                            <comments percent="26.67">4</comments>
                            <empty percent="40.00">6</empty>
                            <total>15</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="hash64_low_s0" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">5</source>
                            <comments percent="26.67">4</comments>
                            <empty percent="40.00">6</empty>
                            <total>15</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="hash64_low_s1" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">5</source>
                            <comments percent="26.67">4</comments>
                            <empty percent="40.00">6</empty>
                            <total>15</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="hash64_majority" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">7</source>
                            <comments percent="28.57">6</comments>
                            <empty percent="38.10">8</empty>
                            <total>21</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
            </methods>
            <statistics>
                <lines>
                    <source percent="32.42">83</source>
                    <comments percent="34.77">89</comments>
                    <empty percent="32.81">84</empty>
                    <total>256</total>
                </lines>
                <complexity>
                    <minimum>1</minimum>
                    <maximum>2</maximum>
                    <average>1.11</average>
                </complexity>
                <nesting>
                    <minimum>1</minimum>
                    <maximum>2</maximum>
                    <average>1.11</average>
                </nesting>
                <methods>9</methods>
            </statistics>
        </unit>
    </units>
    <statistics>
        <lines>
            <source percent="32.42">83</source>
            <comments percent="34.77">89</comments>
            <empty percent="32.81">84</empty>
            <total>256</total>
        </lines>
        <complexity>
            <minimum>1</minimum>
            <maximum>2</maximum>
            <average>1.11</average>
        </complexity>
        <nesting>
            <minimum>1</minimum>
            <maximum>2</maximum>
            <average>1.11</average>
        </nesting>
        <methods>9</methods>
    </statistics>
    <code>
        <line t="M" i="1" b="0" n="0">module m_hash64</line>
        <line t="M" i="2" b="0" n="0"></line>
        <line t="C" i="3" b="0" n="0">!------------------------------------------------------------------------------</line>
        <line t="C" i="4" b="0" n="0">! Copyright : 2022, Fran Martinez Fadrique &lt;Fran.Martinez.Fadrique@gmail.com&gt;</line>
        <line t="C" i="5" b="0" n="0">! Project   : Atlantis</line>
        <line t="C" i="6" b="0" n="0">! Author    : Fran Martinez Fadrique</line>
        <line t="C" i="7" b="0" n="0">! Language  : Object Oriented Fortran 2018</line>
        <line t="C" i="8" b="0" n="0">! Reference : FIPS 180-2, Secure Hash Standard</line>
        <line t="C" i="9" b="0" n="0">!             http://csrc.nist.gov/publications/fips/fips180-2/fips180-2.pdf</line>
        <line t="C" i="10" b="0" n="0">! Synopsis  : Cryptographic hashing base abstract class for 32-bit algorithms</line>
        <line t="C" i="11" b="0" n="0">!</line>
        <line t="C" i="12" b="0" n="0">! License   : This file is part of Frypto.</line>
        <line t="C" i="13" b="0" n="0">!</line>
        <line t="C" i="14" b="0" n="0">!             Frypto is free software: you can redistribute it and/or modify</line>
        <line t="C" i="15" b="0" n="0">!             it under the terms of the GNU Lesser General Public License as</line>
        <line t="C" i="16" b="0" n="0">!             published by the Free Software Foundation, either version 3 of</line>
        <line t="C" i="17" b="0" n="0">!             the License, or (at your option) any later version.</line>
        <line t="C" i="18" b="0" n="0">!</line>
        <line t="C" i="19" b="0" n="0">!             Frypto is distributed in the hope that it will be useful,</line>
        <line t="C" i="20" b="0" n="0">!             but WITHOUT ANY WARRANTY; without even the implied warranty of</line>
        <line t="C" i="21" b="0" n="0">!             MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</line>
        <line t="C" i="22" b="0" n="0">!             See the GNU Lesser General Public License for more details.</line>
        <line t="C" i="23" b="0" n="0">!</line>
        <line t="C" i="24" b="0" n="0">!             You should have received a copy of the GNU Lesser General Public</line>
        <line t="C" i="25" b="0" n="0">!             License along with Frypto.  </line>
        <line t="C" i="26" b="0" n="0">!             If not, see &lt;http://www.gnu.org/licenses/&gt;.</line>
        <line t="C" i="27" b="0" n="0">!------------------------------------------------------------------------------</line>
        <line t="C" i="28" b="0" n="0"></line>
        <line t="C" i="29" b="0" n="0">!- Start of use statements ----------------------------------------------------</line>
        <line t="C" i="30" b="0" n="0"></line>
        <line t="X" i="31" b="0" n="0">  use m_util_convert</line>
        <line t="X" i="32" b="0" n="0">  use m_hash</line>
        <line t="X" i="33" b="0" n="0"></line>
        <line t="C" i="34" b="0" n="0">!- End of use statements ------------------------------------------------------</line>
        <line t="C" i="35" b="0" n="0"></line>
        <line t="X" i="36" b="0" n="0">  implicit none</line>
        <line t="X" i="37" b="0" n="0"></line>
        <line t="C" i="38" b="0" n="0">!- Start of Public/Private declarations ---------------------------------------</line>
        <line t="C" i="39" b="0" n="0"></line>
        <line t="X" i="40" b="0" n="0">  private</line>
        <line t="X" i="41" b="0" n="0">  public t_hash64</line>
        <line t="X" i="42" b="0" n="0"></line>
        <line t="C" i="43" b="0" n="0">!- End of Public/Private declarations -----------------------------------------</line>
        <line t="C" i="44" b="0" n="0"></line>
        <line t="C" i="45" b="0" n="0">!- Start of module variable declarations --------------------------------------</line>
        <line t="C" i="46" b="0" n="0"></line>
        <line t="C" i="47" b="0" n="0">! Size of the hash trailing (in bytes)</line>
        <line t="X" i="48" b="0" n="0">  integer, parameter :: size_of_H_trailing = 16</line>
        <line t="X" i="49" b="0" n="0"></line>
        <line t="C" i="50" b="0" n="0">! Size of the message block (1024 bits = 128 bytes)</line>
        <line t="X" i="51" b="0" n="0">  integer, parameter :: size_of_M = 128</line>
        <line t="X" i="52" b="0" n="0"></line>
        <line t="C" i="53" b="0" n="0">! Hashing base type for 32 bit algorithms</line>
        <line t="T" i="54" b="0" n="0">  type, abstract, extends(t_hash) :: t_hash64</line>
        <line t="X" i="55" b="0" n="0">    private</line>
        <line t="X" i="56" b="0" n="0"></line>
        <line t="X" i="57" b="0" n="0">    contains</line>
        <line t="X" i="58" b="0" n="0"></line>
        <line t="C" i="59" b="0" n="0">!     Hashing finalisation</line>
        <line t="C" i="60" b="0" n="0">!     Finalises the hashing process and stores the resulting hash</line>
        <line t="X" i="61" b="0" n="0">      procedure :: finalise =&gt; hash64_finalise</line>
        <line t="X" i="62" b="0" n="0"></line>
        <line t="C" i="63" b="0" n="0">!     Basic algorithm for crypto (Choose)</line>
        <line t="X" i="64" b="0" n="0">      procedure, nopass :: choose =&gt; hash64_choose</line>
        <line t="X" i="65" b="0" n="0"></line>
        <line t="C" i="66" b="0" n="0">!     Basic algorithm for crypto (Majority)</line>
        <line t="X" i="67" b="0" n="0">      procedure, nopass :: majority =&gt; hash64_majority</line>
        <line t="X" i="68" b="0" n="0"></line>
        <line t="C" i="69" b="0" n="0">!     Basic algorithm for crypto (low_s0)</line>
        <line t="X" i="70" b="0" n="0">      procedure, nopass :: low_s0 =&gt; hash64_low_s0</line>
        <line t="X" i="71" b="0" n="0"></line>
        <line t="C" i="72" b="0" n="0">!     Basic algorithm for crypto (low_s1)</line>
        <line t="X" i="73" b="0" n="0">      procedure, nopass :: low_s1 =&gt; hash64_low_s1</line>
        <line t="X" i="74" b="0" n="0"></line>
        <line t="C" i="75" b="0" n="0">!     Basic algorithm for crypto (high_s0)</line>
        <line t="X" i="76" b="0" n="0">      procedure, nopass :: high_s0 =&gt; hash64_high_s0</line>
        <line t="X" i="77" b="0" n="0"></line>
        <line t="C" i="78" b="0" n="0">!     Basic algorithm for crypto (high_s1)</line>
        <line t="X" i="79" b="0" n="0">      procedure, nopass :: high_s1 =&gt; hash64_high_s1</line>
        <line t="X" i="80" b="0" n="0"></line>
        <line t="C" i="81" b="0" n="0">!     Get hash trailing size</line>
        <line t="X" i="82" b="0" n="0">      procedure, nopass :: get_hash_trailing_size =&gt; hash64_get_hash_trailing_size</line>
        <line t="X" i="83" b="0" n="0"></line>
        <line t="C" i="84" b="0" n="0">!     Get size of the message schedule</line>
        <line t="X" i="85" b="0" n="0">      procedure, nopass :: get_size_of_M =&gt; hash64_get_size_of_M</line>
        <line t="X" i="86" b="0" n="0"></line>
        <line t="T" i="87" b="0" n="0">  end type t_hash64</line>
        <line t="T" i="88" b="0" n="0"></line>
        <line t="C" i="89" b="0" n="0">!- End of module variable declarations ----------------------------------------</line>
        <line t="C" i="90" b="0" n="0"></line>
        <line t="X" i="91" b="0" n="0">contains</line>
        <line t="X" i="92" b="0" n="0"></line>
        <line t="C" i="93" b="0" n="0">! Finalise the message disgest</line>
        <line k="hash64_finalise" t="F" i="94" b="1" n="1">pure function hash64_finalise( this, H ) result(res)</line>
        <line t="F" i="95" b="1" n="1"></line>
        <line t="C" i="96" b="1" n="1">! The hash structure</line>
        <line t="X" i="97" b="1" n="1">  class(t_hash64), intent(in) :: this</line>
        <line t="X" i="98" b="1" n="1"></line>
        <line t="C" i="99" b="1" n="1">! Hash buffer</line>
        <line t="X" i="100" b="1" n="1">  class(*), dimension(:), intent(in) :: H</line>
        <line t="X" i="101" b="1" n="1"></line>
        <line t="C" i="102" b="1" n="1">! Resulting hash</line>
        <line t="X" i="103" b="1" n="1">  integer(kind=1), dimension(:), allocatable :: res</line>
        <line t="X" i="104" b="1" n="1"></line>
        <line t="C" i="105" b="1" n="1">! Local varaibles</line>
        <line t="X" i="106" b="1" n="1">  integer(kind=8), dimension(size(H)) :: local8</line>
        <line t="X" i="107" b="1" n="1"></line>
        <line t="C" i="108" b="1" n="1">! Allocate resulting hash</line>
        <line t="X" i="109" b="1" n="1">  allocate( res(this%get_hash_size()) )</line>
        <line t="X" i="110" b="1" n="1"></line>
        <line t="C" i="111" b="1" n="1">! Reoroder the bytes</line>
        <line t="C" i="112" b="1" n="1">! The solution is in 8 64-bit integers left to write with</line>
        <line t="C" i="113" b="1" n="1">! their bytes order right to left.</line>
        <line t="C" i="114" b="1" n="1">! First step: arrange al qwords right to left by qword</line>
        <line t="C" i="115" b="1" n="1">! Second step: revert all bytes left to right</line>
        <line t="X" i="116" b="1" n="2">  select type( H )</line>
        <line t="X" i="117" b="2" n="2">    type is(integer(kind=8))</line>
        <line t="X" i="118" b="2" n="2">    local8 = H(size(H):1:-1)</line>
        <line t="X" i="119" b="2" n="1">  end select</line>
        <line t="X" i="120" b="2" n="1">  res = transfer( local8, res )</line>
        <line t="X" i="121" b="2" n="1">  res = res(size(res):1:-1)</line>
        <line t="X" i="122" b="2" n="1"></line>
        <line t="EF" i="123" b="2" n="1">end function hash64_finalise</line>
        <line t="EF" i="124" b="1" n="1"></line>
        <line t="EF" i="125" b="1" n="1"></line>
        <line t="C" i="126" b="1" n="1">! Basic function for crypto (Choose)</line>
        <line k="hash64_choose" t="F" i="127" b="1" n="1">pure function hash64_choose( x, y, z ) result(res)</line>
        <line t="F" i="128" b="1" n="1"></line>
        <line t="C" i="129" b="1" n="1">! First word</line>
        <line t="X" i="130" b="1" n="1">  integer(kind=8), intent(in) :: x</line>
        <line t="X" i="131" b="1" n="1"></line>
        <line t="C" i="132" b="1" n="1">! Second word</line>
        <line t="X" i="133" b="1" n="1">  integer(kind=8), intent(in) :: y</line>
        <line t="X" i="134" b="1" n="1"></line>
        <line t="C" i="135" b="1" n="1">! Third word</line>
        <line t="X" i="136" b="1" n="1">  integer(kind=8), intent(in) :: z</line>
        <line t="X" i="137" b="1" n="1"></line>
        <line t="C" i="138" b="1" n="1">! Return word</line>
        <line t="X" i="139" b="1" n="1">  integer(kind=8) :: res</line>
        <line t="X" i="140" b="1" n="1"></line>
        <line t="C" i="141" b="1" n="1">! Compute the result</line>
        <line t="X" i="142" b="1" n="1">  res = ieor( iand( x, y ), iand( not(x), z ) )</line>
        <line t="X" i="143" b="1" n="1"></line>
        <line t="EF" i="144" b="1" n="1">end function hash64_choose</line>
        <line t="EF" i="145" b="1" n="1"></line>
        <line t="EF" i="146" b="1" n="1"></line>
        <line t="C" i="147" b="1" n="1">! Basic function for crypto (Majority)</line>
        <line k="hash64_majority" t="F" i="148" b="1" n="1">pure function hash64_majority( x, y, z ) result(res)</line>
        <line t="F" i="149" b="1" n="1"></line>
        <line t="C" i="150" b="1" n="1">! First word</line>
        <line t="X" i="151" b="1" n="1">  integer(kind=8), intent(in) :: x</line>
        <line t="X" i="152" b="1" n="1"></line>
        <line t="C" i="153" b="1" n="1">! Second word</line>
        <line t="X" i="154" b="1" n="1">  integer(kind=8), intent(in) :: y</line>
        <line t="X" i="155" b="1" n="1"></line>
        <line t="C" i="156" b="1" n="1">! Third word</line>
        <line t="X" i="157" b="1" n="1">  integer(kind=8), intent(in) :: z</line>
        <line t="X" i="158" b="1" n="1"></line>
        <line t="C" i="159" b="1" n="1">! Return word</line>
        <line t="X" i="160" b="1" n="1">  integer(kind=8) :: res</line>
        <line t="X" i="161" b="1" n="1"></line>
        <line t="C" i="162" b="1" n="1">! Compute the result</line>
        <line t="X" i="163" b="1" n="1">  res = ieor( ieor( iand( x, y ), iand( x, z ) ), iand( y, z ) )</line>
        <line t="X" i="164" b="1" n="1"></line>
        <line t="EF" i="165" b="1" n="1">end function hash64_majority</line>
        <line t="EF" i="166" b="1" n="1"></line>
        <line t="EF" i="167" b="1" n="1"></line>
        <line t="C" i="168" b="1" n="1">! Basic function for SHA-384/512 (high_s0)</line>
        <line k="hash64_high_s0" t="F" i="169" b="1" n="1">pure function hash64_high_s0( x ) result(res)</line>
        <line t="F" i="170" b="1" n="1"></line>
        <line t="C" i="171" b="1" n="1">! Input word</line>
        <line t="X" i="172" b="1" n="1">  integer(kind=8), intent(in) :: x</line>
        <line t="X" i="173" b="1" n="1"></line>
        <line t="C" i="174" b="1" n="1">! Return word</line>
        <line t="X" i="175" b="1" n="1">  integer(kind=8) :: res</line>
        <line t="X" i="176" b="1" n="1"></line>
        <line t="C" i="177" b="1" n="1">! Compute the result</line>
        <line t="X" i="178" b="1" n="1">  integer(kind=8) :: a, b, c, y</line>
        <line t="X" i="179" b="1" n="1">  a = ishftc(x,-28)</line>
        <line t="X" i="180" b="1" n="1">  b = ishftc(x,-34)</line>
        <line t="X" i="181" b="1" n="1">  c = ishftc(x,-39)</line>
        <line t="X" i="182" b="1" n="1">  y = ishftc(x,-1)</line>
        <line t="X" i="183" b="1" n="1">  res = ieor( ishftc(x,-28), ieor( ishftc(x,-34), ishftc(x,-39) ) )</line>
        <line t="X" i="184" b="1" n="1"></line>
        <line t="EF" i="185" b="1" n="1">end function hash64_high_s0</line>
        <line t="EF" i="186" b="1" n="1"></line>
        <line t="EF" i="187" b="1" n="1"></line>
        <line t="C" i="188" b="1" n="1">! Basic function for SHA-384/512 (high_s1)</line>
        <line k="hash64_high_s1" t="F" i="189" b="1" n="1">pure function hash64_high_s1( x ) result(res)</line>
        <line t="F" i="190" b="1" n="1"></line>
        <line t="C" i="191" b="1" n="1">! Input word</line>
        <line t="X" i="192" b="1" n="1">  integer(kind=8), intent(in) :: x</line>
        <line t="X" i="193" b="1" n="1"></line>
        <line t="C" i="194" b="1" n="1">! Return word</line>
        <line t="X" i="195" b="1" n="1">  integer(kind=8) :: res</line>
        <line t="X" i="196" b="1" n="1"></line>
        <line t="C" i="197" b="1" n="1">! Compute the result</line>
        <line t="X" i="198" b="1" n="1">  res = ieor( ishftc(x,-14), ieor( ishftc(x,-18), ishftc(x,-41) ) )</line>
        <line t="X" i="199" b="1" n="1"></line>
        <line t="EF" i="200" b="1" n="1">end function hash64_high_s1</line>
        <line t="EF" i="201" b="1" n="1"></line>
        <line t="EF" i="202" b="1" n="1"></line>
        <line t="C" i="203" b="1" n="1">! Basic function for SHA-384/512 (low_s0)</line>
        <line k="hash64_low_s0" t="F" i="204" b="1" n="1">pure function hash64_low_s0( x ) result(res)</line>
        <line t="F" i="205" b="1" n="1"></line>
        <line t="C" i="206" b="1" n="1">! Input word</line>
        <line t="X" i="207" b="1" n="1">  integer(kind=8), intent(in) :: x</line>
        <line t="X" i="208" b="1" n="1"></line>
        <line t="C" i="209" b="1" n="1">! Return word</line>
        <line t="X" i="210" b="1" n="1">  integer(kind=8) :: res</line>
        <line t="X" i="211" b="1" n="1"></line>
        <line t="C" i="212" b="1" n="1">! Compute the result</line>
        <line t="X" i="213" b="1" n="1">  res = ieor( ishftc(x,-1), ieor( ishftc(x,-8), ishft(x,-7) ) )</line>
        <line t="X" i="214" b="1" n="1"></line>
        <line t="EF" i="215" b="1" n="1">end function hash64_low_s0</line>
        <line t="EF" i="216" b="1" n="1"></line>
        <line t="EF" i="217" b="1" n="1"></line>
        <line t="C" i="218" b="1" n="1">! Basic function for SHA-384/512 (low_s1)</line>
        <line k="hash64_low_s1" t="F" i="219" b="1" n="1">pure function hash64_low_s1( x ) result(res)</line>
        <line t="F" i="220" b="1" n="1"></line>
        <line t="C" i="221" b="1" n="1">! Input word</line>
        <line t="X" i="222" b="1" n="1">  integer(kind=8), intent(in) :: x</line>
        <line t="X" i="223" b="1" n="1"></line>
        <line t="C" i="224" b="1" n="1">! Return word</line>
        <line t="X" i="225" b="1" n="1">  integer(kind=8) :: res</line>
        <line t="X" i="226" b="1" n="1"></line>
        <line t="C" i="227" b="1" n="1">! Compute the result</line>
        <line t="X" i="228" b="1" n="1">  res = ieor( ishftc(x,-19), ieor( ishftc(x,-61), ishft(x,-6) ) )</line>
        <line t="X" i="229" b="1" n="1"></line>
        <line t="EF" i="230" b="1" n="1">end function hash64_low_s1</line>
        <line t="EF" i="231" b="1" n="1"></line>
        <line t="EF" i="232" b="1" n="1"></line>
        <line t="C" i="233" b="1" n="1">! Get the hash traling size (bytes) for this hash</line>
        <line k="hash64_get_hash_trailing_size" t="F" i="234" b="1" n="1">pure function hash64_get_hash_trailing_size() result(res)</line>
        <line t="F" i="235" b="1" n="1"></line>
        <line t="C" i="236" b="1" n="1">! Hash size</line>
        <line t="X" i="237" b="1" n="1">  integer :: res</line>
        <line t="X" i="238" b="1" n="1"></line>
        <line t="C" i="239" b="1" n="1">! Return the size of the hash trailing (in bytes)</line>
        <line t="X" i="240" b="1" n="1">  res = size_of_H_trailing</line>
        <line t="X" i="241" b="1" n="1"></line>
        <line t="EF" i="242" b="1" n="1">end function hash64_get_hash_trailing_size</line>
        <line t="EF" i="243" b="1" n="1"></line>
        <line t="EF" i="244" b="1" n="1"></line>
        <line t="C" i="245" b="1" n="1">! Get the size of the message schedule</line>
        <line k="hash64_get_size_of_M" t="F" i="246" b="1" n="1">pure function hash64_get_size_of_M() result(res)</line>
        <line t="F" i="247" b="1" n="1"></line>
        <line t="C" i="248" b="1" n="1">! Hash size</line>
        <line t="X" i="249" b="1" n="1">  integer :: res</line>
        <line t="X" i="250" b="1" n="1"></line>
        <line t="C" i="251" b="1" n="1">! Return the size of the message schedule (in bytes)</line>
        <line t="X" i="252" b="1" n="1">  res = size_of_M</line>
        <line t="X" i="253" b="1" n="1"></line>
        <line t="EF" i="254" b="1" n="1">end function hash64_get_size_of_M</line>
        <line t="EF" i="255" b="1" n="1"></line>
        <line t="M" i="256" b="1" n="1">end module m_hash64</line>
        <line t="M" i="257" b="1" n="1"></line>
    </code>
</fmx>