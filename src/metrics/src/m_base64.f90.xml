<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../fmx.xsl"?>
<fmx xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="m_base64.f90">
    <context>
        <time>2025-03-09T18:24:38</time>
        <version>1.0.0.1</version>
        <path>src</path>
        <path_to_root>../</path_to_root>
        <project>Frypto</project>
        <name>m_base64.f90</name>
        <copyright>Copyright © 2020, Fran Martinez Fadrique &lt;Fran.Martinez.Fadrique@gmail.com&gt;</copyright>
    </context>
    <units>
        <unit name="m_base64" type="module">
            <main>
                <lines>
                    <source percent="29.85">40</source>
                    <comments percent="50.00">67</comments>
                    <empty percent="20.15">27</empty>
                    <total>134</total>
                </lines>
                <complexity>
                    <minimum>0</minimum>
                    <maximum>0</maximum>
                    <average>0.00</average>
                </complexity>
                <nesting>
                    <minimum>0</minimum>
                    <maximum>0</maximum>
                    <average>0.00</average>
                </nesting>
                <methods>0</methods>
            </main>
            <methods>
                <method name="base64_decode_block" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="40.63">13</source>
                            <comments percent="34.38">11</comments>
                            <empty percent="25.00">8</empty>
                            <total>32</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="base64_default" type="function">
                    <statistics>
                        <lines>
                            <source percent="36.36">4</source>
                            <comments percent="27.27">3</comments>
                            <empty percent="36.36">4</empty>
                            <total>11</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="base64_encode_block" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="48.48">16</source>
                            <comments percent="30.30">10</comments>
                            <empty percent="21.21">7</empty>
                            <total>33</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="base64_main" type="function">
                    <statistics>
                        <lines>
                            <source percent="44.44">8</source>
                            <comments percent="22.22">4</comments>
                            <empty percent="33.33">6</empty>
                            <total>18</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="base64_trail_len" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">7</source>
                            <comments percent="28.57">6</comments>
                            <empty percent="38.10">8</empty>
                            <total>21</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
            </methods>
            <statistics>
                <lines>
                    <source percent="35.34">88</source>
                    <comments percent="40.56">101</comments>
                    <empty percent="24.10">60</empty>
                    <total>249</total>
                </lines>
                <complexity>
                    <minimum>1</minimum>
                    <maximum>1</maximum>
                    <average>1.00</average>
                </complexity>
                <nesting>
                    <minimum>1</minimum>
                    <maximum>1</maximum>
                    <average>1.00</average>
                </nesting>
                <methods>5</methods>
            </statistics>
        </unit>
    </units>
    <statistics>
        <lines>
            <source percent="35.34">88</source>
            <comments percent="40.56">101</comments>
            <empty percent="24.10">60</empty>
            <total>249</total>
        </lines>
        <complexity>
            <minimum>1</minimum>
            <maximum>1</maximum>
            <average>1.00</average>
        </complexity>
        <nesting>
            <minimum>1</minimum>
            <maximum>1</maximum>
            <average>1.00</average>
        </nesting>
        <methods>5</methods>
    </statistics>
    <code>
        <line t="M" i="1" b="0" n="0">module m_base64</line>
        <line t="M" i="2" b="0" n="0"></line>
        <line t="C" i="3" b="0" n="0">!------------------------------------------------------------------------------</line>
        <line t="C" i="4" b="0" n="0">! Copyright : 2022, Fran Martinez Fadrique &lt;Fran.Martinez.Fadrique@gmail.com&gt;</line>
        <line t="C" i="5" b="0" n="0">! Project   : Atlantis</line>
        <line t="C" i="6" b="0" n="0">! Author    : Fran Martinez Fadrique</line>
        <line t="C" i="7" b="0" n="0">! Language  : Object Oriented Fortran 2018</line>
        <line t="C" i="8" b="0" n="0">! Synopsis  : Base64 encoding</line>
        <line t="C" i="9" b="0" n="0">!</line>
        <line t="C" i="10" b="0" n="0">! Algorithm</line>
        <line t="C" i="11" b="0" n="0">!  - Divide the input bytes stream into blocks of 3 bytes.</line>
        <line t="C" i="12" b="0" n="0">!  - Divide 24 bits of each 3-byte block into 4 groups of 6 bits.</line>
        <line t="C" i="13" b="0" n="0">!  - Map each group of 6 bits to 1 printable character, based on the 6-bit</line>
        <line t="C" i="14" b="0" n="0">!    value using the Base64 character set map.</line>
        <line t="C" i="15" b="0" n="0">!  - If the last 3-byte block has only 1 byte of input data, pad 2 bytes of zero</line>
        <line t="C" i="16" b="0" n="0">!    (\x0000). After encoding it as a normal block, override the last 2</line>
        <line t="C" i="17" b="0" n="0">!    characters with 2 equal signs (==), so the decoding process knows 2 bytes</line>
        <line t="C" i="18" b="0" n="0">!    of zero were padded.</line>
        <line t="C" i="19" b="0" n="0">!  - If the last 3-byte block has only 2 bytes of input data, pad 1 byte of zero</line>
        <line t="C" i="20" b="0" n="0">!    (\x00). After encoding it as a normal block, override the last 1 character</line>
        <line t="C" i="21" b="0" n="0">!    with 1 equal signs (=), so the decoding process knows 1 byte of zero was padded.</line>
        <line t="C" i="22" b="0" n="0">!</line>
        <line t="C" i="23" b="0" n="0">!    Not yet implemented:</line>
        <line t="C" i="24" b="0" n="0">!    Carriage return (\r) and new line (\n) are inserted into the output character</line>
        <line t="C" i="25" b="0" n="0">!    stream. They will be ignored by the decoding process.</line>
        <line t="C" i="26" b="0" n="0">!</line>
        <line t="C" i="27" b="0" n="0">! License   : This file is part of Frypto.</line>
        <line t="C" i="28" b="0" n="0">!</line>
        <line t="C" i="29" b="0" n="0">!             Frypto is free software: you can redistribute it and/or modify</line>
        <line t="C" i="30" b="0" n="0">!             it under the terms of the GNU Lesser General Public License as</line>
        <line t="C" i="31" b="0" n="0">!             published by the Free Software Foundation, either version 3 of</line>
        <line t="C" i="32" b="0" n="0">!             the License, or (at your option) any later version.</line>
        <line t="C" i="33" b="0" n="0">!</line>
        <line t="C" i="34" b="0" n="0">!             Frypto is distributed in the hope that it will be useful,</line>
        <line t="C" i="35" b="0" n="0">!             but WITHOUT ANY WARRANTY; without even the implied warranty of</line>
        <line t="C" i="36" b="0" n="0">!             MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</line>
        <line t="C" i="37" b="0" n="0">!             See the GNU Lesser General Public License for more details.</line>
        <line t="C" i="38" b="0" n="0">!</line>
        <line t="C" i="39" b="0" n="0">!             You should have received a copy of the GNU Lesser General Public</line>
        <line t="C" i="40" b="0" n="0">!             License along with Frypto.  </line>
        <line t="C" i="41" b="0" n="0">!             If not, see &lt;http://www.gnu.org/licenses/&gt;.</line>
        <line t="C" i="42" b="0" n="0">!------------------------------------------------------------------------------</line>
        <line t="C" i="43" b="0" n="0"></line>
        <line t="C" i="44" b="0" n="0">!- Start of use statements ----------------------------------------------------</line>
        <line t="C" i="45" b="0" n="0"></line>
        <line t="X" i="46" b="0" n="0">  use m_ascii_encoder</line>
        <line t="X" i="47" b="0" n="0"></line>
        <line t="C" i="48" b="0" n="0">!- End of use statements ------------------------------------------------------</line>
        <line t="C" i="49" b="0" n="0"></line>
        <line t="X" i="50" b="0" n="0">  implicit none</line>
        <line t="X" i="51" b="0" n="0"></line>
        <line t="C" i="52" b="0" n="0">!- Start of Public/Private declarations ---------------------------------------</line>
        <line t="C" i="53" b="0" n="0"></line>
        <line t="X" i="54" b="0" n="0">  private</line>
        <line t="X" i="55" b="0" n="0">  public t_base64</line>
        <line t="X" i="56" b="0" n="0">  public base64</line>
        <line t="X" i="57" b="0" n="0"></line>
        <line t="C" i="58" b="0" n="0">!- End of Public/Private declarations -----------------------------------------</line>
        <line t="C" i="59" b="0" n="0"></line>
        <line t="C" i="60" b="0" n="0">!- Start of module variable declarations --------------------------------------</line>
        <line t="C" i="61" b="0" n="0"></line>
        <line t="C" i="62" b="0" n="0">! Base64 encoding type</line>
        <line t="T" i="63" b="0" n="0">  type, extends(t_ascii_encoder) :: t_base64</line>
        <line t="X" i="64" b="0" n="0">    private</line>
        <line t="X" i="65" b="0" n="0"></line>
        <line t="X" i="66" b="0" n="0">    contains</line>
        <line t="X" i="67" b="0" n="0"></line>
        <line t="C" i="68" b="0" n="0">!     Block encoding</line>
        <line t="X" i="69" b="0" n="0">      procedure, nopass :: encode_block =&gt; base64_encode_block</line>
        <line t="X" i="70" b="0" n="0"></line>
        <line t="C" i="71" b="0" n="0">!     Block decoding</line>
        <line t="X" i="72" b="0" n="0">      procedure, nopass :: decode_block =&gt; base64_decode_block</line>
        <line t="X" i="73" b="0" n="0"></line>
        <line t="C" i="74" b="0" n="0">!     Length of the trailing part of the data</line>
        <line t="X" i="75" b="0" n="0">      procedure, nopass :: trail_len =&gt; base64_trail_len</line>
        <line t="X" i="76" b="0" n="0"></line>
        <line t="T" i="77" b="0" n="0">  end type t_base64</line>
        <line t="T" i="78" b="0" n="0"></line>
        <line t="C" i="79" b="0" n="0">! Decoded block size</line>
        <line t="X" i="80" b="0" n="0">  integer, parameter :: base64_blk_size = 3</line>
        <line t="X" i="81" b="0" n="0"></line>
        <line t="C" i="82" b="0" n="0">! Encoded block size</line>
        <line t="X" i="83" b="0" n="0">  integer, parameter :: base64_cblk_size = 4</line>
        <line t="X" i="84" b="0" n="0"></line>
        <line t="C" i="85" b="0" n="0">! Encoding lookup table (character representation)</line>
        <line t="X" i="86" b="0" n="0">  character, dimension(0:63), parameter :: base64_encode_chars = [ &amp;</line>
        <line t="X" i="87" b="0" n="0">    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', &amp;</line>
        <line t="X" i="88" b="0" n="0">    'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', &amp;</line>
        <line t="X" i="89" b="0" n="0">    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', &amp;</line>
        <line t="X" i="90" b="0" n="0">    'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', &amp;</line>
        <line t="X" i="91" b="0" n="0">    '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/' ]</line>
        <line t="X" i="92" b="0" n="0"></line>
        <line t="C" i="93" b="0" n="0">! Encoding lookup table (byte representation)</line>
        <line t="X" i="94" b="0" n="0">  integer(kind=1), dimension(0:63), parameter :: base64_encode_dictionary = ichar(base64_encode_chars,1)</line>
        <line t="X" i="95" b="0" n="0"></line>
        <line t="C" i="96" b="0" n="0">! Decoding lookup table (byte representation)</line>
        <line t="X" i="97" b="0" n="0">  integer(kind=1), dimension(43:122), parameter :: base64_decode_dictionary = [ &amp;</line>
        <line t="X" i="98" b="0" n="0">    62_1,  0_1,  0_1,  0_1, 63_1, 52_1, 53_1, 54_1, 55_1, 56_1, 57_1, 58_1, 59_1, &amp;</line>
        <line t="X" i="99" b="0" n="0">    60_1, 61_1,  0_1,  0_1,  0_1,  0_1,  0_1,  0_1,  0_1,  0_1,  1_1,  2_1,  3_1, &amp;</line>
        <line t="X" i="100" b="0" n="0">     4_1,  5_1,  6_1,  7_1,  8_1,  9_1, 10_1, 11_1, 12_1, 13_1, 14_1, 15_1, 16_1, &amp;</line>
        <line t="X" i="101" b="0" n="0">    17_1, 18_1, 19_1, 20_1, 21_1, 22_1, 23_1, 24_1, 25_1,  0_1,  0_1,  0_1,  0_1, &amp;</line>
        <line t="X" i="102" b="0" n="0">     0_1,  0_1, 26_1, 27_1, 28_1, 29_1, 30_1, 31_1, 32_1, 33_1, 34_1, 35_1, 36_1, &amp;</line>
        <line t="X" i="103" b="0" n="0">    37_1, 38_1, 39_1, 40_1, 41_1, 42_1, 43_1, 44_1, 45_1, 46_1, 47_1, 48_1, 49_1, &amp;</line>
        <line t="X" i="104" b="0" n="0">    50_1, 51_1 ]</line>
        <line t="X" i="105" b="0" n="0"></line>
        <line t="C" i="106" b="0" n="0">! Padding constants</line>
        <line t="X" i="107" b="0" n="0">  integer(kind=1), parameter :: base64_padding = 0_1</line>
        <line t="X" i="108" b="0" n="0">  integer(kind=1), parameter :: base64_cpadding = ichar('=',1)</line>
        <line t="X" i="109" b="0" n="0"></line>
        <line t="C" i="110" b="0" n="0">! Padding map from decoded to encoded</line>
        <line t="C" i="111" b="0" n="0">! Number of coded characters as function of characters in decoded block</line>
        <line t="C" i="112" b="0" n="0">! A__ --&gt; XX==</line>
        <line t="C" i="113" b="0" n="0">! AB_ --&gt; XXX=</line>
        <line t="C" i="114" b="0" n="0">! ABC --&gt; XXXX</line>
        <line t="X" i="115" b="0" n="0">  integer, dimension(1:3), parameter :: base64_encoded_trailing = [ 2, 3, 4 ]</line>
        <line t="X" i="116" b="0" n="0"></line>
        <line t="C" i="117" b="0" n="0">! Padding map from encoded to decoded</line>
        <line t="C" i="118" b="0" n="0">! Number of decoded characters as function of characters in coded block</line>
        <line t="C" i="119" b="0" n="0">! XX== --&gt; A__</line>
        <line t="C" i="120" b="0" n="0">! XXX= --&gt; AB_</line>
        <line t="C" i="121" b="0" n="0">! XXXX --&gt; ABC</line>
        <line t="X" i="122" b="0" n="0">  integer, dimension(1:4), parameter :: base64_decoded_trailing = [ 0, 1, 2, 3 ]</line>
        <line t="X" i="123" b="0" n="0"></line>
        <line t="C" i="124" b="0" n="0">! Constructor interface</line>
        <line t="X" i="125" b="0" n="0">  interface base64</line>
        <line t="X" i="126" b="0" n="0">    module procedure base64_default</line>
        <line t="X" i="127" b="0" n="0">    module procedure base64_main</line>
        <line t="X" i="128" b="0" n="0">  end interface base64</line>
        <line t="X" i="129" b="0" n="0"></line>
        <line t="C" i="130" b="0" n="0">!- End of module variable declarations ----------------------------------------</line>
        <line t="C" i="131" b="0" n="0"></line>
        <line t="X" i="132" b="0" n="0">contains</line>
        <line t="X" i="133" b="0" n="0"></line>
        <line t="C" i="134" b="0" n="0">! Default constructor</line>
        <line k="base64_default" t="F" i="135" b="1" n="1">pure function base64_default() result(res)</line>
        <line t="F" i="136" b="1" n="1"></line>
        <line t="C" i="137" b="1" n="1">! The Base64 context</line>
        <line t="X" i="138" b="1" n="1">  type(t_base64) :: res</line>
        <line t="X" i="139" b="1" n="1"></line>
        <line t="C" i="140" b="1" n="1">! Initialise the processing structures</line>
        <line t="X" i="141" b="1" n="1">  res = base64( .true. )</line>
        <line t="X" i="142" b="1" n="1"></line>
        <line t="EF" i="143" b="1" n="1">end function base64_default</line>
        <line t="EF" i="144" b="1" n="1"></line>
        <line t="EF" i="145" b="1" n="1"></line>
        <line t="C" i="146" b="1" n="1">! Main constructor</line>
        <line k="base64_main" t="F" i="147" b="1" n="1">pure function base64_main( padding ) result(res)</line>
        <line t="F" i="148" b="1" n="1"></line>
        <line t="C" i="149" b="1" n="1">! Flag to generate encoding with padding</line>
        <line t="X" i="150" b="1" n="1">  logical, intent(in) :: padding</line>
        <line t="X" i="151" b="1" n="1"></line>
        <line t="C" i="152" b="1" n="1">! The Base64 context</line>
        <line t="X" i="153" b="1" n="1">  type(t_base64) :: res</line>
        <line t="X" i="154" b="1" n="1"></line>
        <line t="C" i="155" b="1" n="1">! Initialise the processing structures</line>
        <line t="X" i="156" b="1" n="1">  call res%initialise( base64_blk_size, base64_cblk_size, &amp;</line>
        <line t="X" i="157" b="1" n="1">                       base64_padding, base64_cpadding, &amp;</line>
        <line t="X" i="158" b="1" n="1">                       base64_encoded_trailing, base64_decoded_trailing, &amp;</line>
        <line t="X" i="159" b="1" n="1">                       padding )</line>
        <line t="X" i="160" b="1" n="1"></line>
        <line t="EF" i="161" b="1" n="1">end function base64_main</line>
        <line t="EF" i="162" b="1" n="1"></line>
        <line t="EF" i="163" b="1" n="1"></line>
        <line t="C" i="164" b="1" n="1">! Base64 encode one block</line>
        <line k="base64_encode_block" t="S" i="165" b="1" n="1">pure subroutine base64_encode_block( blk, cblk )</line>
        <line t="S" i="166" b="1" n="1"></line>
        <line t="C" i="167" b="1" n="1">! The block to encode (3 bytes)</line>
        <line t="X" i="168" b="1" n="1">  integer(kind=1), dimension(:), intent(in) :: blk</line>
        <line t="X" i="169" b="1" n="1"></line>
        <line t="C" i="170" b="1" n="1">! The encoded block (4 bytes)</line>
        <line t="X" i="171" b="1" n="1">  integer(kind=1), dimension(:), intent(out) :: cblk</line>
        <line t="X" i="172" b="1" n="1"></line>
        <line t="C" i="173" b="1" n="1">! Patterns</line>
        <line t="C" i="174" b="1" n="1">!        1         2         2         3         3         4  res</line>
        <line t="C" i="175" b="1" n="1">!        1         1         2         2         3         3  blk</line>
        <line t="C" i="176" b="1" n="1">!        1         2         3         4         5         6  pattern</line>
        <line t="C" i="177" b="1" n="1">! 11111100  00000011  11110000  00001111  11000000  00111111</line>
        <line t="C" i="178" b="1" n="1">!    z'FC'     z'03'     z'F0'     z'0F'     z'C0'     z'3F'</line>
        <line t="X" i="179" b="1" n="1">  integer(kind=1), dimension(6) , parameter :: pattern = [ -4_1, 3_1, -16_1, 15_1, -64_1, 63_1 ]</line>
        <line t="X" i="180" b="1" n="1">  integer(kind=1) :: i6bits</line>
        <line t="X" i="181" b="1" n="1"></line>
        <line t="C" i="182" b="1" n="1">! Assign the resulting bytes from the 6-bit blocks</line>
        <line t="X" i="183" b="1" n="1">  i6bits = ishft( iand( blk(1), pattern(1) ), -2 )</line>
        <line t="X" i="184" b="1" n="1">  cblk(1) = base64_encode_dictionary(i6bits)</line>
        <line t="X" i="185" b="1" n="1">  i6bits = ishft( iand( blk(1), pattern(2) ), 4 ) + &amp;</line>
        <line t="X" i="186" b="1" n="1">           ishft( iand( blk(2), pattern(3) ), -4 )</line>
        <line t="X" i="187" b="1" n="1">  cblk(2) = base64_encode_dictionary(i6bits)</line>
        <line t="X" i="188" b="1" n="1">  i6bits = ishft( iand( blk(2), pattern(4) ), 2 ) + &amp;</line>
        <line t="X" i="189" b="1" n="1">           ishft( iand( blk(3), pattern(5) ), -6 )</line>
        <line t="X" i="190" b="1" n="1">  cblk(3) = base64_encode_dictionary(i6bits)</line>
        <line t="X" i="191" b="1" n="1">  i6bits = iand( blk(3), pattern(6) )</line>
        <line t="X" i="192" b="1" n="1">  cblk(4) = base64_encode_dictionary(i6bits)</line>
        <line t="X" i="193" b="1" n="1"></line>
        <line t="ES" i="194" b="1" n="1">end subroutine base64_encode_block</line>
        <line t="ES" i="195" b="1" n="1"></line>
        <line t="ES" i="196" b="1" n="1"></line>
        <line t="C" i="197" b="1" n="1">! Base64 decode one block</line>
        <line k="base64_decode_block" t="S" i="198" b="1" n="1">pure subroutine base64_decode_block( cblk, blk )</line>
        <line t="S" i="199" b="1" n="1"></line>
        <line t="C" i="200" b="1" n="1">! The block to decode (4 bytes)</line>
        <line t="X" i="201" b="1" n="1">  integer(kind=1), dimension(:), intent(in) :: cblk</line>
        <line t="X" i="202" b="1" n="1"></line>
        <line t="C" i="203" b="1" n="1">! The decoded block (3 bytes)</line>
        <line t="X" i="204" b="1" n="1">  integer(kind=1), dimension(:), intent(out) :: blk</line>
        <line t="X" i="205" b="1" n="1"></line>
        <line t="C" i="206" b="1" n="1">! Patterns</line>
        <line t="C" i="207" b="1" n="1">!        1         1         2         2         3         3</line>
        <line t="C" i="208" b="1" n="1">!        1         2         2         3         3         4  blk</line>
        <line t="C" i="209" b="1" n="1">!        1         2         3         4         5         6  pattern</line>
        <line t="C" i="210" b="1" n="1">! 00111111  00110000  00001111  00111100  00000011  00111111</line>
        <line t="C" i="211" b="1" n="1">!    z'3F'     z'30'     z'0F'     z'3C'     z'03'     z'3F'</line>
        <line t="X" i="212" b="1" n="1">  integer(kind=1), dimension(6) , parameter :: pattern = [ 63_1, 48_1, 15_1, 60_1, 3_1, 63_1 ]</line>
        <line t="X" i="213" b="1" n="1">  integer(kind=1), dimension(4) :: i6bit</line>
        <line t="X" i="214" b="1" n="1"></line>
        <line t="C" i="215" b="1" n="1">! Decode the 6-bit representation</line>
        <line t="X" i="216" b="1" n="1">  i6bit = base64_decode_dictionary( cblk )</line>
        <line t="X" i="217" b="1" n="1"></line>
        <line t="C" i="218" b="1" n="1">! Assign the resulting bytes from the 6-bit blocks</line>
        <line t="X" i="219" b="1" n="1">  blk(1) = ishft( iand( i6bit(1), pattern(1) ), 2 ) + &amp;</line>
        <line t="X" i="220" b="1" n="1">           ishft( iand( i6bit(2), pattern(2) ), -4 )</line>
        <line t="X" i="221" b="1" n="1">  blk(2) = ishft( iand( i6bit(2), pattern(3) ), 4 ) + &amp;</line>
        <line t="X" i="222" b="1" n="1">           ishft( iand( i6bit(3), pattern(4) ), -2 )</line>
        <line t="X" i="223" b="1" n="1">  blk(3) = ishft( iand( i6bit(3), pattern(5) ), 6 ) + &amp;</line>
        <line t="X" i="224" b="1" n="1">           iand( i6bit(4), pattern(6) )</line>
        <line t="X" i="225" b="1" n="1"></line>
        <line t="ES" i="226" b="1" n="1">end subroutine base64_decode_block</line>
        <line t="ES" i="227" b="1" n="1"></line>
        <line t="ES" i="228" b="1" n="1"></line>
        <line t="C" i="229" b="1" n="1">! Return length of the trailing part of the data</line>
        <line k="base64_trail_len" t="F" i="230" b="1" n="1">pure function base64_trail_len( text ) result(res)</line>
        <line t="F" i="231" b="1" n="1"></line>
        <line t="C" i="232" b="1" n="1">! The encoded block (4 bytes)</line>
        <line t="X" i="233" b="1" n="1">  integer(kind=1), dimension(:), intent(in) :: text</line>
        <line t="X" i="234" b="1" n="1"></line>
        <line t="C" i="235" b="1" n="1">! The encoded data without padding</line>
        <line t="X" i="236" b="1" n="1">  integer :: res</line>
        <line t="X" i="237" b="1" n="1"></line>
        <line t="C" i="238" b="1" n="1">! Local variables</line>
        <line t="X" i="239" b="1" n="1">  integer(kind=1), dimension(base64_cblk_size) :: cblk</line>
        <line t="X" i="240" b="1" n="1"></line>
        <line t="C" i="241" b="1" n="1">! Initialise</line>
        <line t="X" i="242" b="1" n="1">  cblk = text(size(text)-base64_cblk_size+1:)</line>
        <line t="X" i="243" b="1" n="1"></line>
        <line t="C" i="244" b="1" n="1">! Return the length</line>
        <line t="X" i="245" b="1" n="1">  res = count( cblk /= base64_cpadding )</line>
        <line t="X" i="246" b="1" n="1"></line>
        <line t="EF" i="247" b="1" n="1">end function base64_trail_len</line>
        <line t="EF" i="248" b="1" n="1"></line>
        <line t="M" i="249" b="1" n="1">end module m_base64</line>
        <line t="M" i="250" b="1" n="1"></line>
    </code>
</fmx>