<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../fmx.xsl"?>
<fmx xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" name="m_sha1.f90">
    <context>
        <time>2025-03-09T18:24:38</time>
        <version>1.0.0.1</version>
        <path>src</path>
        <path_to_root>../</path_to_root>
        <project>Frypto</project>
        <name>m_sha1.f90</name>
        <copyright>Copyright © 2020, Fran Martinez Fadrique &lt;Fran.Martinez.Fadrique@gmail.com&gt;</copyright>
    </context>
    <units>
        <unit name="m_sha1" type="module">
            <main>
                <lines>
                    <source percent="26.67">24</source>
                    <comments percent="47.78">43</comments>
                    <empty percent="25.56">23</empty>
                    <total>90</total>
                </lines>
                <complexity>
                    <minimum>0</minimum>
                    <maximum>0</maximum>
                    <average>0.00</average>
                </complexity>
                <nesting>
                    <minimum>0</minimum>
                    <maximum>0</maximum>
                    <average>0.00</average>
                </nesting>
                <methods>0</methods>
            </main>
            <methods>
                <method name="sha1_default" type="function">
                    <statistics>
                        <lines>
                            <source percent="36.36">4</source>
                            <comments percent="27.27">3</comments>
                            <empty percent="36.36">4</empty>
                            <total>11</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="sha1_get_hash_size" type="function">
                    <statistics>
                        <lines>
                            <source percent="33.33">4</source>
                            <comments percent="25.00">3</comments>
                            <empty percent="41.67">5</empty>
                            <total>12</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="sha1_initialise" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="33.33">4</source>
                            <comments percent="25.00">3</comments>
                            <empty percent="41.67">5</empty>
                            <total>12</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>1</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
                <method name="sha1_update" type="subroutine">
                    <statistics>
                        <lines>
                            <source percent="69.47">66</source>
                            <comments percent="13.68">13</comments>
                            <empty percent="16.84">16</empty>
                            <total>95</total>
                        </lines>
                        <complexity>
                            <minimum>0</minimum>
                            <maximum>9</maximum>
                            <average>0.00</average>
                        </complexity>
                        <nesting>
                            <minimum>0</minimum>
                            <maximum>2</maximum>
                            <average>0.00</average>
                        </nesting>
                    </statistics>
                </method>
            </methods>
            <statistics>
                <lines>
                    <source percent="46.36">102</source>
                    <comments percent="29.55">65</comments>
                    <empty percent="24.09">53</empty>
                    <total>220</total>
                </lines>
                <complexity>
                    <minimum>1</minimum>
                    <maximum>9</maximum>
                    <average>3.00</average>
                </complexity>
                <nesting>
                    <minimum>1</minimum>
                    <maximum>2</maximum>
                    <average>1.25</average>
                </nesting>
                <methods>4</methods>
            </statistics>
        </unit>
    </units>
    <statistics>
        <lines>
            <source percent="46.36">102</source>
            <comments percent="29.55">65</comments>
            <empty percent="24.09">53</empty>
            <total>220</total>
        </lines>
        <complexity>
            <minimum>1</minimum>
            <maximum>9</maximum>
            <average>3.00</average>
        </complexity>
        <nesting>
            <minimum>1</minimum>
            <maximum>2</maximum>
            <average>1.25</average>
        </nesting>
        <methods>4</methods>
    </statistics>
    <code>
        <line t="M" i="1" b="0" n="0">module m_sha1</line>
        <line t="M" i="2" b="0" n="0"></line>
        <line t="C" i="3" b="0" n="0">!------------------------------------------------------------------------------</line>
        <line t="C" i="4" b="0" n="0">! Copyright : 2022, Fran Martinez Fadrique &lt;Fran.Martinez.Fadrique@gmail.com&gt;</line>
        <line t="C" i="5" b="0" n="0">! Project   : Atlantis</line>
        <line t="C" i="6" b="0" n="0">! Author    : Fran Martinez Fadrique</line>
        <line t="C" i="7" b="0" n="0">! Language  : Object Oriented Fortran 2018</line>
        <line t="C" i="8" b="0" n="0">! Reference : FIPS 180-2, Secure Hash Standard</line>
        <line t="C" i="9" b="0" n="0">!             http://csrc.nist.gov/publications/fips/fips180-2/fips180-2.pdf</line>
        <line t="C" i="10" b="0" n="0">! Synopsis  : Cryptographic Secure Hash Algorithm (SHA-1)</line>
        <line t="C" i="11" b="0" n="0">!</line>
        <line t="C" i="12" b="0" n="0">! License   : This file is part of Frypto.</line>
        <line t="C" i="13" b="0" n="0">!</line>
        <line t="C" i="14" b="0" n="0">!             Frypto is free software: you can redistribute it and/or modify</line>
        <line t="C" i="15" b="0" n="0">!             it under the terms of the GNU Lesser General Public License as</line>
        <line t="C" i="16" b="0" n="0">!             published by the Free Software Foundation, either version 3 of</line>
        <line t="C" i="17" b="0" n="0">!             the License, or (at your option) any later version.</line>
        <line t="C" i="18" b="0" n="0">!</line>
        <line t="C" i="19" b="0" n="0">!             Frypto is distributed in the hope that it will be useful,</line>
        <line t="C" i="20" b="0" n="0">!             but WITHOUT ANY WARRANTY; without even the implied warranty of</line>
        <line t="C" i="21" b="0" n="0">!             MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</line>
        <line t="C" i="22" b="0" n="0">!             See the GNU Lesser General Public License for more details.</line>
        <line t="C" i="23" b="0" n="0">!</line>
        <line t="C" i="24" b="0" n="0">!             You should have received a copy of the GNU Lesser General Public</line>
        <line t="C" i="25" b="0" n="0">!             License along with Frypto.  </line>
        <line t="C" i="26" b="0" n="0">!             If not, see &lt;http://www.gnu.org/licenses/&gt;.</line>
        <line t="C" i="27" b="0" n="0">!------------------------------------------------------------------------------</line>
        <line t="C" i="28" b="0" n="0"></line>
        <line t="C" i="29" b="0" n="0">!- Start of use statements ----------------------------------------------------</line>
        <line t="C" i="30" b="0" n="0"></line>
        <line t="X" i="31" b="0" n="0">  use m_hash32</line>
        <line t="X" i="32" b="0" n="0"></line>
        <line t="C" i="33" b="0" n="0">!- End of use statements ------------------------------------------------------</line>
        <line t="C" i="34" b="0" n="0"></line>
        <line t="X" i="35" b="0" n="0">  implicit none</line>
        <line t="X" i="36" b="0" n="0"></line>
        <line t="C" i="37" b="0" n="0">!- Start of Public/Private declarations ---------------------------------------</line>
        <line t="C" i="38" b="0" n="0"></line>
        <line t="X" i="39" b="0" n="0">  private</line>
        <line t="X" i="40" b="0" n="0">  public t_sha1</line>
        <line t="X" i="41" b="0" n="0">  public sha1</line>
        <line t="X" i="42" b="0" n="0"></line>
        <line t="C" i="43" b="0" n="0">!- End of Public/Private declarations -----------------------------------------</line>
        <line t="C" i="44" b="0" n="0"></line>
        <line t="C" i="45" b="0" n="0">!- Start of module variable declarations --------------------------------------</line>
        <line t="C" i="46" b="0" n="0"></line>
        <line t="C" i="47" b="0" n="0">! Initial hash value</line>
        <line t="X" i="48" b="0" n="0">  integer(kind=4), dimension(5), parameter :: H0 = &amp;</line>
        <line t="X" i="49" b="0" n="0">         [ int(z'67452301'), int(z'efcdab89'), int(z'98badcfe'), int(z'10325476'), int(z'c3d2e1f0') ]</line>
        <line t="X" i="50" b="0" n="0"></line>
        <line t="C" i="51" b="0" n="0">! SHA-1 processing constants</line>
        <line t="X" i="52" b="0" n="0">  integer(kind=4), dimension(4), parameter :: K = &amp;</line>
        <line t="X" i="53" b="0" n="0">         [ int(z'5a827999'), int(z'6ed9eba1'), int(z'8f1bbcdc'), int(z'ca62c1d6') ]</line>
        <line t="X" i="54" b="0" n="0"></line>
        <line t="C" i="55" b="0" n="0">! Size of the message schedule</line>
        <line t="X" i="56" b="0" n="0">  integer, parameter :: size_of_W = 80</line>
        <line t="X" i="57" b="0" n="0"></line>
        <line t="C" i="58" b="0" n="0">! Size of the hash (in 32-bit words)</line>
        <line t="X" i="59" b="0" n="0">  integer, parameter :: size_of_H = 5</line>
        <line t="X" i="60" b="0" n="0"></line>
        <line t="C" i="61" b="0" n="0">! Hashing algorithm for SHA-1</line>
        <line t="T" i="62" b="0" n="0">  type, extends(t_hash32) :: t_sha1</line>
        <line t="X" i="63" b="0" n="0">    private</line>
        <line t="X" i="64" b="0" n="0"></line>
        <line t="X" i="65" b="0" n="0">    contains</line>
        <line t="X" i="66" b="0" n="0"></line>
        <line t="C" i="67" b="0" n="0">!     Hashing initialisation</line>
        <line t="C" i="68" b="0" n="0">!     Initialises the hashing base message-digest operation</line>
        <line t="X" i="69" b="0" n="0">      procedure, nopass :: initialise =&gt; sha1_initialise</line>
        <line t="X" i="70" b="0" n="0"></line>
        <line t="C" i="71" b="0" n="0">!     Hashing update operation</line>
        <line t="C" i="72" b="0" n="0">!     Continues the message-digest operation, processing</line>
        <line t="C" i="73" b="0" n="0">!     another message block, and updating the context</line>
        <line t="X" i="74" b="0" n="0">      procedure :: update =&gt; sha1_update</line>
        <line t="X" i="75" b="0" n="0"></line>
        <line t="C" i="76" b="0" n="0">!     Get hash size</line>
        <line t="X" i="77" b="0" n="0">      procedure, nopass :: get_hash_size =&gt; sha1_get_hash_size</line>
        <line t="X" i="78" b="0" n="0"></line>
        <line t="T" i="79" b="0" n="0">  end type t_sha1</line>
        <line t="T" i="80" b="0" n="0"></line>
        <line t="C" i="81" b="0" n="0">! Constructor interface</line>
        <line t="X" i="82" b="0" n="0">  interface sha1</line>
        <line t="X" i="83" b="0" n="0">    module procedure sha1_default</line>
        <line t="X" i="84" b="0" n="0">  end interface sha1</line>
        <line t="X" i="85" b="0" n="0"></line>
        <line t="C" i="86" b="0" n="0">!- End of module variable declarations ----------------------------------------</line>
        <line t="C" i="87" b="0" n="0"></line>
        <line t="X" i="88" b="0" n="0">contains</line>
        <line t="X" i="89" b="0" n="0"></line>
        <line t="C" i="90" b="0" n="0">! Default constructor</line>
        <line k="sha1_default" t="F" i="91" b="1" n="1">pure function sha1_default() result(res)</line>
        <line t="F" i="92" b="1" n="1"></line>
        <line t="C" i="93" b="1" n="1">! Constructed structure</line>
        <line t="X" i="94" b="1" n="1">  type(t_sha1) :: res</line>
        <line t="X" i="95" b="1" n="1"></line>
        <line t="C" i="96" b="1" n="1">! Initialise</line>
        <line t="X" i="97" b="1" n="1">  res = t_sha1()</line>
        <line t="X" i="98" b="1" n="1"></line>
        <line t="EF" i="99" b="1" n="1">end function sha1_default</line>
        <line t="EF" i="100" b="1" n="1"></line>
        <line t="EF" i="101" b="1" n="1"></line>
        <line t="C" i="102" b="1" n="1">! Initialisation</line>
        <line k="sha1_initialise" t="S" i="103" b="1" n="1">pure subroutine sha1_initialise( H )</line>
        <line t="S" i="104" b="1" n="1"></line>
        <line t="C" i="105" b="1" n="1">! Initial value for hash buffer</line>
        <line t="X" i="106" b="1" n="1">  class(*), allocatable, dimension(:), intent(inout) :: H</line>
        <line t="X" i="107" b="1" n="1"></line>
        <line t="C" i="108" b="1" n="1">! Return initial hash</line>
        <line t="X" i="109" b="1" n="1">  allocate( H, source=H0 )</line>
        <line t="X" i="110" b="1" n="1"></line>
        <line t="ES" i="111" b="1" n="1">end subroutine sha1_initialise</line>
        <line t="ES" i="112" b="1" n="1"></line>
        <line t="ES" i="113" b="1" n="1"></line>
        <line t="C" i="114" b="1" n="1">! Message disgst update</line>
        <line k="sha1_update" t="S" i="115" b="1" n="1">pure subroutine sha1_update( this, M, H )</line>
        <line t="S" i="116" b="1" n="1"></line>
        <line t="C" i="117" b="1" n="1">! Calling object</line>
        <line t="X" i="118" b="1" n="1">  class(t_sha1), intent(in) :: this</line>
        <line t="X" i="119" b="1" n="1"></line>
        <line t="C" i="120" b="1" n="1">! The message schedule</line>
        <line t="X" i="121" b="1" n="1">  integer(kind=1), dimension(:), intent(in) :: M</line>
        <line t="X" i="122" b="1" n="1"></line>
        <line t="C" i="123" b="1" n="1">! Hash buffer</line>
        <line t="X" i="124" b="1" n="1">  class(*), dimension(:), intent(inout) :: H</line>
        <line t="X" i="125" b="1" n="1"></line>
        <line t="C" i="126" b="1" n="1">! Local variables</line>
        <line t="X" i="127" b="1" n="1">  integer :: i, j</line>
        <line t="X" i="128" b="1" n="1">  integer(kind=4), dimension(size_of_W) :: w</line>
        <line t="X" i="129" b="1" n="1">  integer(kind=4) :: t</line>
        <line t="X" i="130" b="1" n="1">  integer(kind=4) :: a, b, c, d, e</line>
        <line t="X" i="131" b="1" n="1"></line>
        <line t="C" i="132" b="1" n="1">! Initalise local variables</line>
        <line t="X" i="133" b="1" n="1">  w = 0</line>
        <line t="X" i="134" b="1" n="1"></line>
        <line t="C" i="135" b="1" n="1">! Prepare the message schedule (1-16)</line>
        <line t="C" i="136" b="1" n="1">! The transfer operations set for every double-word W four bytes from the message block</line>
        <line t="C" i="137" b="1" n="1">! The message block is assigned left to right whereas W is assined right to left</line>
        <line t="X" i="138" b="2" n="2">  do i = 1, 16</line>
        <line t="X" i="139" b="2" n="2">    j = 4 * ( i - 1 ) + 1</line>
        <line t="X" i="140" b="2" n="2">    w(i) = transfer( M(j+3:j:-1), w(i) )</line>
        <line t="X" i="141" b="2" n="1">  end do</line>
        <line t="X" i="142" b="2" n="1"></line>
        <line t="C" i="143" b="2" n="1">! Prepare the message schedule (17-64)</line>
        <line t="X" i="144" b="3" n="2">  do i = 17, size(w)</line>
        <line t="X" i="145" b="3" n="2">    t = ieor( ieor( ieor( w(i-3), w(i-8) ), w(i-14) ), w(i-16) )</line>
        <line t="X" i="146" b="3" n="2">    w(i) = ishftc( t, 1 )</line>
        <line t="X" i="147" b="3" n="1">  end do</line>
        <line t="X" i="148" b="3" n="1"></line>
        <line t="C" i="149" b="3" n="1">! Initialise the intermediate variables</line>
        <line t="X" i="150" b="3" n="2">  select type( H )</line>
        <line t="X" i="151" b="4" n="2">    type is(integer)</line>
        <line t="X" i="152" b="4" n="2">      a = H(1)</line>
        <line t="X" i="153" b="4" n="2">      b = H(2)</line>
        <line t="X" i="154" b="4" n="2">      c = H(3)</line>
        <line t="X" i="155" b="4" n="2">      d = H(4)</line>
        <line t="X" i="156" b="4" n="2">      e = H(5)</line>
        <line t="X" i="157" b="4" n="1">  end select</line>
        <line t="X" i="158" b="4" n="1"></line>
        <line t="C" i="159" b="4" n="1">! Cycle on the intermediate variables</line>
        <line t="X" i="160" b="5" n="2">  do i = 1, 20</line>
        <line t="X" i="161" b="5" n="2">    t = ishftc(a,5) + this%choose( b, c, d ) + e + K(1) + W(i)</line>
        <line t="X" i="162" b="5" n="2">    e = d</line>
        <line t="X" i="163" b="5" n="2">    d = c</line>
        <line t="X" i="164" b="5" n="2">    c = ishftc(b,30)</line>
        <line t="X" i="165" b="5" n="2">    b = a</line>
        <line t="X" i="166" b="5" n="2">    a = t</line>
        <line t="X" i="167" b="5" n="1">  end do</line>
        <line t="X" i="168" b="5" n="1"></line>
        <line t="X" i="169" b="6" n="2">  do i = 21, 40</line>
        <line t="X" i="170" b="6" n="2">    t = ishftc(a,5) + this%parity( b, c, d ) + e + K(2) + W(i)</line>
        <line t="X" i="171" b="6" n="2">    e = d</line>
        <line t="X" i="172" b="6" n="2">    d = c</line>
        <line t="X" i="173" b="6" n="2">    c = ishftc(b,30)</line>
        <line t="X" i="174" b="6" n="2">    b = a</line>
        <line t="X" i="175" b="6" n="2">    a = t</line>
        <line t="X" i="176" b="6" n="1">  end do</line>
        <line t="X" i="177" b="6" n="1"></line>
        <line t="X" i="178" b="7" n="2">  do i = 41, 60</line>
        <line t="X" i="179" b="7" n="2">    t = ishftc(a,5) + this%majority( b, c, d ) + e + K(3) + W(i)</line>
        <line t="X" i="180" b="7" n="2">    e = d</line>
        <line t="X" i="181" b="7" n="2">    d = c</line>
        <line t="X" i="182" b="7" n="2">    c = ishftc(b,30)</line>
        <line t="X" i="183" b="7" n="2">    b = a</line>
        <line t="X" i="184" b="7" n="2">    a = t</line>
        <line t="X" i="185" b="7" n="1">  end do</line>
        <line t="X" i="186" b="7" n="1"></line>
        <line t="X" i="187" b="8" n="2">  do i = 61, 80</line>
        <line t="X" i="188" b="8" n="2">    t = ishftc(a,5) + this%parity( b, c, d ) + e + K(4) + W(i)</line>
        <line t="X" i="189" b="8" n="2">    e = d</line>
        <line t="X" i="190" b="8" n="2">    d = c</line>
        <line t="X" i="191" b="8" n="2">    c = ishftc(b,30)</line>
        <line t="X" i="192" b="8" n="2">    b = a</line>
        <line t="X" i="193" b="8" n="2">    a = t</line>
        <line t="X" i="194" b="8" n="1">  end do</line>
        <line t="X" i="195" b="8" n="1"></line>
        <line t="C" i="196" b="8" n="1">! Update the intermediate hash</line>
        <line t="X" i="197" b="8" n="2">  select type( H )</line>
        <line t="X" i="198" b="9" n="2">    type is(integer)</line>
        <line t="X" i="199" b="9" n="2">      H(1) = a + H(1)</line>
        <line t="X" i="200" b="9" n="2">      H(2) = b + H(2)</line>
        <line t="X" i="201" b="9" n="2">      H(3) = c + H(3)</line>
        <line t="X" i="202" b="9" n="2">      H(4) = d + H(4)</line>
        <line t="X" i="203" b="9" n="2">      H(5) = e + H(5)</line>
        <line t="X" i="204" b="9" n="1">  end select</line>
        <line t="X" i="205" b="9" n="1"></line>
        <line t="ES" i="206" b="9" n="1">end subroutine sha1_update</line>
        <line t="ES" i="207" b="1" n="1"></line>
        <line t="ES" i="208" b="1" n="1"></line>
        <line t="C" i="209" b="1" n="1">! Get the hash size (bytes) for this algorithm</line>
        <line k="sha1_get_hash_size" t="F" i="210" b="1" n="1">pure function sha1_get_hash_size() result(res)</line>
        <line t="F" i="211" b="1" n="1"></line>
        <line t="C" i="212" b="1" n="1">! Hash size</line>
        <line t="X" i="213" b="1" n="1">  integer :: res</line>
        <line t="X" i="214" b="1" n="1"></line>
        <line t="C" i="215" b="1" n="1">! Return the size of the hash (in bytes)</line>
        <line t="X" i="216" b="1" n="1">  res = 4 * size_of_H</line>
        <line t="X" i="217" b="1" n="1"></line>
        <line t="EF" i="218" b="1" n="1">end function sha1_get_hash_size</line>
        <line t="EF" i="219" b="1" n="1"></line>
        <line t="M" i="220" b="1" n="1">end module m_sha1</line>
        <line t="M" i="221" b="1" n="1"></line>
    </code>
</fmx>